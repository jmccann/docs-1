
{ "results": [



    {
    "url": "https://go-vela.github.io/docs/usage/getting-started/authenticate/",
    "display": "Usage/Getting started/Authenticate",
    "title": "Authenticate",
    "content": "warning these docs assume you have vela running. ui navigate to your deployed instance follow the oauth workflow presented on web interface. cli please see authentication reference. if not yet installed cli, install reference first. api sdk "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/secrets_external/",
    "display": "Usage/Samples/Secrets external",
    "title": "External Secrets",
    "content": "sample yaml configuration for project requiring secrets to be used within step scenario user looking create pipeline that can integrate with private vault inject not pushing docker image registry. note: it assumed you have created secret vault_token the web interface cli. samples show using repository secrets. vela contains three types: repository, organization, shared. examples on organization shared, please see concepts documentation. steps following are being below: pull parameters plugins must stored base of as .vela.yml .vela.yaml recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:publishhelloworldimage:target/vela-docker:latestpull:trueparameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# implicit definition.-name:vault_token-origin:name:privatevaultimage:target/secret-vault:latestpull:truesecrets:[vault_token]parameters:addr:vault.example.comauth_method:tokenusername:octocatitems:-source:secret/dockerpath:docker stages version:&#34;1&#34;worker:runtime:dockerstages:docker:steps:-name:publishhelloworldimage:target/vela-docker:latestpull:truesecrets:[docker_username,docker_password]parameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/go_modules/",
    "display": "Usage/Samples/Go modules",
    "title": "Go (With Modules)",
    "content": "sample yaml configuration for project building go binary with modules. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image environment pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:installimage:golang:latestpull:trueenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-goget./...-name:testimage:golang:latestpull:trueenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-gotest./...-name:buildimage:golang:latestpull:trueenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-gobuild stages needs version:&#34;1&#34;stages:install:steps:-name:installimage:golang:latestpull:trueenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-goget./...test:needs:[install]steps:-name:testimage:golang:latestpull:trueenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-gotest./...build:needs:[install]steps:-name:buildimage:golang:latestpull:trueenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-gobuild "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/secrets_internal/",
    "display": "Usage/Samples/Secrets internal",
    "title": "Internal Secrets",
    "content": "sample yaml configuration for project requiring secrets to be used within step scenario user looking create pipeline that can inject not placed into file. simple example would producing docker image with username password. note: it assumed you have created docker_username docker_password the web interface cli. samples show using repository secrets. vela contains three secret types: repository, organization, shared. examples on organization shared, please see concepts documentation. steps following are being below: pull parameters plugins must stored base of as .vela.yml .vela.yaml recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:publishhelloworldimage:target/vela-docker:latestpull:truesecrets:[docker_username,docker_password]parameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# implicit definition. definition only supported native type.-name:docker_username# declarative definition.-name:foo1key:vela/hello-world/docker_passwordengine:nativetype:repo stages version:&#34;1&#34;worker:runtime:dockerstages:docker:steps:-name:publishhelloworldimage:target/vela-docker:latestpull:truesecrets:[docker_username,docker_password]parameters:registry:index.docker.iorepo:index.docker.io/vela/hello-worldsecrets:# "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/mongo/",
    "display": "Usage/Samples/Mongo",
    "title": "Mongo",
    "content": "sample yaml configuration for project requiring mongo as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. example uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: mongo:latest pull: true steps: check status commands: sleeping help ensure service adequate time start sleep 15 &#34;mongo --host --eval &#34;{ ping: &#34;&#34; detach if you&rsquo;re more granular container you add flag within detach: "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/postgres/",
    "display": "Usage/Samples/Postgres",
    "title": "Postgres",
    "content": "sample yaml configuration for project requiring postgres as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. example uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: postgres:latest pull: true environment: postgres_user: admin postgres_db: vela steps: check status commands: sleeping help ensure service adequate time start sleep 15 psql -u -d -h tcp://postgres:5432 detach if you&rsquo;re more granular container you add flag within detach: "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/redis/",
    "display": "Usage/Samples/Redis",
    "title": "Redis",
    "content": "sample yaml configuration for project requiring redis as pipeline dependency. scenario user looking to create that can integrate with an ephemeral instance. services block be used stages steps pipelines. example uses basic configuration. the following concepts are being below: image pull commands note: must stored base of repository .vela.yml .vela.yaml it recommended pin image: versions production pipelines version: &#34;1&#34; services: name: redis:latest pull: true steps: check status commands: sleeping help ensure service adequate time start sleep 15 redis-cli -h ping detach if you&rsquo;re more granular container you add flag within detach: "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/route/",
    "display": "Usage/Samples/Route",
    "title": "Route",
    "content": "sample yaml configuration for project requiring specific runtime platform. scenario user looking to create pipeline that can only run within docker runtime. note: work with your server administer understand what routes are available installation steps the following concepts being used below: worker image pull commands must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;worker:runtime:dockersteps:-name:viewworkernameimage:alpine:latestpull:truecommands:-echo&#34;hello ${build_host} worker!!&#34; stages environment version:&#34;1&#34;worker:runtime:dockerstages:docker:steps:-name:viewworkernameimage:alpine:latestpull:truecommands:-echo&#34;hello "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/rust_cargo/",
    "display": "Usage/Samples/Rust cargo",
    "title": "Rust (With Cargo)",
    "content": "sample yaml configuration for project building rust binary with cargo. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:fetchimage:rust:latestpull:truecommands:-cargofetch--verbose--all-name:testimage:rust:latestpull:trueenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-cargotest--verbose--all-name:buildimage:rust:latestpull:trueenvironment:cgo_enabled:&#39;0&#39;goos:linuxcommands:-cargobuild--verbose--all stages needs version:&#34;1&#34;stages:fetch:steps:-name:fetchimage:rust:latestpull:truecommands:-cargofetch--verbose--alltest:needs:[fetch]steps:-name:testimage:rust:latestpull:truecommands:-cargotest--verbose--allbuild:needs:[fetch]steps:-name:buildimage:rust:latestpull:truecommands:-cargobuild--verbose--all "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/java_gradle/",
    "display": "Usage/Samples/Java gradle",
    "title": "Java (With Gradle)",
    "content": "sample yaml configuration for project building java application with gradle. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image environment pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:installimage:gradle:latestpull:trueenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradledownloaddependencies-name:testimage:gradle:latestpull:trueenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradletest-name:buildimage:gradle:latestpull:trueenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradlebuild stages needs version:&#34;1&#34;stages:install:steps:-name:installimage:gradle:latestpull:trueenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradledownloaddependenciestest:needs:[install]steps:-name:testimage:gradle:latestpull:trueenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradletestbuild:needs:[install]steps:-name:buildimage:gradle:latestpull:trueenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-gradlebuild "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/java_maven/",
    "display": "Usage/Samples/Java maven",
    "title": "Java (With Maven)",
    "content": "sample yaml configuration for project building java application with maven. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:installimage:maven:latestpull:truecommands:-mvninstall-name:testimage:maven:latestpull:truecommands:-mvntest-name:buildimage:maven:latestpull:truecommands:-mvnpackage stages needs version:&#34;1&#34;stages:install:steps:-name:installimage:maven:latestpull:truecommands:-mvninstalltest:needs:[install]steps:-name:testimage:maven:latestpull:trueenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-mvntestbuild:needs:[install]steps:-name:buildimage:maven:latestpull:trueenvironment:gradle_user_home:.gradlegradle_opts:-dorg.gradle.daemon=false-dorg.gradle.workers.max=1-dorg.gradle.parallel=falsecommands:-mvnpackage "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/getting-started/roles/",
    "display": "Usage/Getting started/Roles",
    "title": "Roles",
    "content": "warning at time the only source control provider github. so documentation tailored for those users. vela does not maintain any authentication (authn) authorization (authz) internally, but instead inherits its access from (version control) provider. more information on github&rsquo;s model can be found their documentation. platform roles: admin write read roles admins have full when interacting with cli, ui, api. within github organization option to use orgs allow users permissions all repositories org, fine-grained of adding directly individual repositories. role enables repository, which grants following levels resources: repo build step service log secret "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/getting-started/enable_repo/",
    "display": "Usage/Getting started/Enable repo",
    "title": "Enable a Repo",
    "content": "note: you will need admin access to the repo be able activate it vela. because add webhooks repo. via ui for example, we&rsquo;ll go over using can always head cli docs on how cli. log into your vela instance. click repositories. select org from available list. next would like add. alternatively all repos an org. if doesn&rsquo;t exist, try clicking refresh list top right. now has necessary web hook "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/samples/node/",
    "display": "Usage/Samples/Node",
    "title": "Node",
    "content": "sample yaml configuration for project building node application. scenario user looking to create pipeline that builds an artifact on any event branch pushed source control. steps the following concepts are being used below: image pull commands note: must be stored base of repository as .vela.yml .vela.yaml it recommended pin image: versions production pipelines version:&#34;1&#34;steps:-name:installimage:node:latestpull:truecommands:-nodeinstall-name:lintimage:node:latestpull:truecommands:-nodetest-name:buildimage:node:latestpull:truecommands:-nodebuild stages needs version:&#34;1&#34;stages:install:steps:-name:installimage:node:latestpull:truecommands:-nodeinstalltest:needs:[install]steps:-name:testimage:node:latestpull:truecommands:-nodetestbuild:needs:[install]steps:-name:buildimage:node:latestpull:truecommands:-nodebuild "
    },

    {
    "url": "https://go-vela.github.io/docs/api/authentication/",
    "display": "Docs/Api/Authentication",
    "title": "Authentication",
    "content": "overview authentication for the vela api responsibility of client initiating request. each request requires token to be provided as an authorization http header. content header should using bearer &lt;token&gt; scheme. authorization: more information, you can visit swagger documentation. format tokens are based off json web (a.k.a. jwt) standard. broken down into distinct sections, separated by periods (.): metadata about type signing algorithm used payload data claims) providing additional information signature encoded string header, secret syntax header.payload.signature sample xxxxx.yyyyy.zzzzz jwt introduction curl -x get -h &#34;authorization: &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/install/",
    "display": "Docs/Cli/Install",
    "title": "Install",
    "content": "please keep mind your operating system (os) when referring to the installation instructions below. macos homebrew recommended method for installing vela cli on mac. add tap brew configuration go-vela/vela update taps install curl download binary -l https://github.com/go-vela/cli/releases/latest/download/vela_darwin_amd64.tar.gz tar zx copy $path sudo cp /usr/local/bin/ linux https://github.com/go-vela/cli/releases/latest/download/vela_linux_amd64.tar.gz windows utility must be installed before following command prompt https://github.com/go-vela/cli/releases/latest/download/vela_windows_amd64.tar.gz --output vela_windows_amd64.tar.gz unzip tarball xzvf c: system32/vela.exe powershell -outfile (powershell core) from source intended developers advanced users only. section assumes you have already setup golang. golang, review documentation. repo go get -d github.com/go-vela/cli change directory cd ${gopath}/src/github.com/go-vela/cli build release with -o releases/vela "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/install/",
    "display": "Sdk/Go/Install",
    "title": "Install",
    "content": "download you can the go sdk to your project with following command: get -u github.com/go-vela/sdk-go import into statement: &#34;github.com/go-vela/sdk-go/vela&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/getting-started/start_build/",
    "display": "Usage/Getting started/Start build",
    "title": "Start a Build",
    "content": "if you&rsquo;ve followed the documentation for enabling repo writing pipeline, all that should be left to push your pipeline repo. build does not trigger when change repo, check webhook response see there an error. "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/getting-started/skipping_build/",
    "display": "Usage/Getting started/Skipping build",
    "title": "Skipping a Build",
    "content": "to prevent vela from running build for commit, add one of the following your commit title message: [skip ci] [ci skip] vela] [vela ***no_ci*** note: you can use upper lower case. will receive payload source control provider return 200 response with reason why was not triggered. "
    },

    {
    "url": "https://go-vela.github.io/docs/usage/getting-started/workspace/",
    "display": "Usage/Getting started/Workspace",
    "title": "Understanding the Workspace",
    "content": "vela uses shared volume model between steps to allow file system during the build process. these volumes should be considered ephemeral sense once completes execution all data via being destroyed. working directory ensures configuration, code, dependencies, compiled binaries are persisted steps. default workspace attached every unique matches below pattern: source: syntax /vela/src/&lt;source_provider/&lt;source org&gt;/&lt;source repo&gt; example /vela/src/github.com/go-vela/hello-world secrets: /vela/secrets/&lt;path&gt;/&lt;key&gt; /vela/secrets/github/username/ /vela/secrets/github/password/ parameters: /vela/parameters/github/repo/settings/topics before you use parameters check plugin authors docs ensure it has support read from /vela/parameters would equivalent following docker commands executed: create build-workspace run --volume=build-workspace:/vela/ &lt;image&gt; cloning automatically checks out repository into local that mounted each container. generally referred as workspace, which defines by build. git clone https://github.com/go-vela/hello-world.git &lt;workspace&gt; cases where your needs special configuration add step at beginning of pipeline adding desired behavior. "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/authentication/",
    "display": "Docs/Cli/Authentication",
    "title": "Authentication",
    "content": "overview authentication with the vela cli responsibility of client initiating request. each request requires server address user token to be provided. you can provide these variables three ways: configuration file environment flags recommended method for providing api cli. default path found $home/.vela/config.yml. log capture personal token: syntax login --api.addr &lt;vela url&gt; example https://vela-server.localhost generate file: config --api.token &lt;personal token&gt; qwerty123 more information, visit documentation. configure vela_addr variable: export vela_addr=https://vela-server.localhost vela_token vela_token=&lt;personal it&rsquo;s add your terminal profile (~/.bashrc ~/.zshrc) pass as flag argument: "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/authentication/",
    "display": "Sdk/Go/Authentication",
    "title": "Authentication",
    "content": "overview authentication with the vela sdk responsibility of client initiating request. each request requires server address user token to be provided. sample below go program demonstrating how authenticate sdk: package main import &#34;github.com/go-vela/sdk-go/vela&#34; func main() // url full uri := &#34;http://localhost:8080&#34; access given you from tip: can get by using /login endpoint &#34;qwerty123&#34; instantiate new client, vela.newclient(url, nil) set mechanism for use our client.authentication.settokenauth(token) "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/validate/",
    "display": "Docs/Cli/Validate",
    "title": "Validate",
    "content": "command has been moved to vela validate pipeline. for more information, please see the documentation "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/registry/terraform/",
    "display": "Pipeline/Registry/Terraform",
    "title": "",
    "content": "description plugin enables you to run terraform against providers vela pipeline. source code: https://github.com/go-vela/vela-terraform registry: https://hub.docker.com/r/target/vela-terraform supports environment (parameter_*) volume (/vela/parameters/*) configuration for setting parameters. the precedence order take files then variables if both are set container. usage by default runs current directory. use directory: path/to/tf/files point at file files. ships with version but can download specific need version: x.x.x sample of adding init options configuration: -name:applyimage:target/vela-terraform:v0.1.0pull:trueparameters:action:applyauto_approve:true# required versions 0.12.xinit_options:get_plugins:true applying 0.12.x destroying -name:destroyimage:target/vela-terraform:v0.1.0pull:trueparameters:action:destroyauto_approve:true# formatting files: -name:fmtimage:target/vela-terraform:v0.1.0pull:trueparameters:action:fmt planning -name:planimage:target/vela-terraform:v0.1.0pull:trueparameters:action:plan validating -name:validateimage:target/vela-terraform:v0.1.0pull:trueparameters:action:validate secrets users should refrain from configuring sensitive information their pipeline plain text. name: apply image: target/vela-terraform:v0.1.0 pull: true secrets: github_token parameters: action: auto_approve: parameters following used configure name action perform n/a directory be performed on false init_options operation log_level log level info cli within backend backend_configs merged what force_copy suppress prompts about copying state data from_module copy contents given module into target before initialization get any modules get_plugins missing plugins input ask not directly lock when locking supported lock_timeout duration retry no_color disables colors output plugin_dirs containing binaries; overrides all search paths reconfigure backend, ignoring saved upgrade install latest allowed configured constraints verify_plugins verify authenticity integrity automatically downloaded uses command defaults explicitly set. auto_approve skip interactive approval running back_up path backup existing parallelism number concurrent operations as walks its graph refresh update prior checking differences read save state_out write updated resource vars map pass (&lt;key&gt;=&lt;value&gt;) var_files list var destroy format fmt check validate formatted diff diffs changes whose differs result instead stdout plan resources managed detailed_exit_code return detailed exit codes exits module_depth specifies depth show check_variables will whether have been specified template coming soon! troubleshooting we recommend reviewing terraform&rsquo;s debugging guide further. start tuning logs being displayed: init_options: get_plugins: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/api/build/add/",
    "display": "Api/Build/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;author&#34;: &#34;octokitty&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;event&#34;: &#34;push&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;sender&#34;: &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: https://github.com/github/octocat&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/deployment/add/",
    "display": "Api/Deployment/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/deployments/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;ref&#34;: &#34;master&#34;, &#34;target&#34;: &#34;production&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/hook/add/",
    "display": "Api/Hook/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/hooks/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;status&#34;: &#34;success&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat&#34; response &#34;id&#34;: &#34;repo_id&#34;: &#34;build_id&#34;: &#34;created&#34;: &#34;1563474076&#34;, &#34;error&#34;: &#34;&#34;, &#34;success&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/repo/add/",
    "display": "Api/Repo/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;owner&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/api/secret/add/",
    "display": "Api/Secret/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/secrets/:engine/:type/:org/:name parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;bar&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, null, &#34;type&#34;: &#34;repo&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/service/add/",
    "display": "Api/Service/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build/services parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;name&#34;: &#34;clone&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services&#34; response &#34;id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://go-vela.github.io/docs/api/step/add/",
    "display": "Api/Step/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build/steps parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;number&#34;: 1, &#34;name&#34;: &#34;clone&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps&#34; response &#34;id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/user/add/",
    "display": "Api/User/Add",
    "title": "Add",
    "content": "endpoint post /api/v1/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;name&#34;: &#34;octokitty&#34;, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; response &#34;id&#34;: 1, &#34;token&#34;: null, "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/deployment/add/",
    "display": "Cli/Deployment/Add",
    "title": "Add",
    "content": "command vela add deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, deployment_org repo repository vela_repo, deployment_repo ref branch, commit, tag vela_deployment, deployment_number target vela_target, deployment_target short vela_description, deployment_description task vela_task, deployment_task output format vela_output, deployment_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;https://api.github.com/repos/github/octocat/deployments/1&#34; was created "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/repo/add/",
    "display": "Cli/Repo/Add",
    "title": "Add",
    "content": "command vela add repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name link full url vela_link, repo_link clone vela_clone, repo_clone visibility access level required view vela_visibility, repo_visibility timeout max time allowed per build vela_timeout, repo_timeout private disables public vela_private, repo_private trusted elevates permissions builds vela_trusted, repo_trusted active enables/disables vela_active, repo_active event events trigger vela_events, repo_events output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 visibility: private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/secret/add/",
    "display": "Cli/Secret/Add",
    "title": "Add",
    "content": "command vela add secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. note on special characters: certain characters may require to encapsulate your with &quot; '. have be double escaped parameters the following are used configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name value vela_value, secret_value image build image(s) access vela_images, secret_images event event(s) vela_events, secret_events commands allows step vela_commands, secret_commands file secret(s) vela_file, secret_file output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo --value bar response &#34;foo&#34; was added advanced input from creating single-line multi-line using symbol. syntax @/path/to/file example @$home/tmp/secret.txt secrets multiple filename parameter. -f secret.yml single yaml document ---metadata:version:v1engine:nativesecrets:-org:octocatrepo:githubname:foovalue:bartype:repoimages:-golang:latestevents:-push-pull_request-org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:-golang:latestevents:-push-pull_request ---metadata:version:v1engine:nativesecrets:-org:githubrepo:octocatname:foovalue:bartype:repoimages:-golang:latestevents:-push-pull_request---metadata:version:v1engine:vaultsecrets:-org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:-golang:latestevents:-push-pull_request "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/build/add/",
    "display": "Go/Build/Add",
    "title": "Add",
    "content": "function func (svc *buildservice) add(org, repo string, *library.build) (*library.build, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description org of organization repository information on build permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/repo/add/",
    "display": "Go/Repo/Add",
    "title": "Add",
    "content": "function func (svc *reposervice) add(r *library.repo) (*library.repo, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description information on repo permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example of here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/secret/add/",
    "display": "Go/Secret/Add",
    "title": "Add",
    "content": "function func (svc *secretservice) add(engine, stype, org, name string, *library.secret) (*library.secret, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: description engine of secret stype type org organization repository team information on permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/service/add/",
    "display": "Go/Service/Add",
    "title": "Add",
    "content": "function func (svc *svcservice) add(org, repo string, build int, *library.service) (*library.service, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description org of organization repository number information on service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/step/add/",
    "display": "Go/Step/Add",
    "title": "Add",
    "content": "function func (svc *stepservice) add(org, repo string, build int, *library.step) (*library.step, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description org of organization repository number information on step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/registry/artifactory/",
    "display": "Pipeline/Registry/Artifactory",
    "title": "Artifactory",
    "content": "overview plugin enables the ability to manage artifacts artifactory vela pipeline. source code: https://github.com/go-vela/vela-artifactory registry: https://hub.docker.com/r/target/vela-artifactory supports environment (parameter_*) volume (/vela/parameters/*) configuration for setting parameters. precedence order take files then variables if both are set container. usage sample of copying an artifact: steps:-name:copy_artifactsimage:target/vela-artifactory:v0.2.0pull:trueparameters:action:copypath:libs-snapshot-local/foo.txttarget:libs-snapshot-local/bar.txturl:http://localhost:8081/artifactory deleting steps:-name:delete_artifactsimage:target/vela-artifactory:v0.2.0pull:trueparameters:action:deletepath:libs-snapshot-local/foo.txturl:http://localhost:8081/artifactory properties on steps:-name:set_properties_artifactsimage:target/vela-artifactory:v0.2.0pull:trueparameters:action:set-proppath:libs-snapshot-local/foo.txtprops:-name:singlevalue:foo-name:multiplevalues:-bar-bazurl:http://localhost:8081/artifactory uploading steps:-name:upload_artifactsimage:target/vela-artifactory:v0.2.0pull:trueparameters:action:uploadpath:libs-snapshot-local/sources:-foo.txt-target/*.jar-dist/**/*.jsurl:http://localhost:8081/artifactory pretending upload steps: name: upload_artifacts image: target/vela-artifactory:v0.2.0 pull: true parameters: action: dry_run: path: libs-snapshot-local/ sources: foo.txt target/*.jar dist/**/*.js url: http://localhost:8081/artifactory using docker-promote steps:-name:docker_promote_artifactsimage:target/vela-artifactory:v0.2.0pull:trueparameters:action:docker-promotetarget_repo:libs-snapshot-localdocker_registry:octocat/hello-worldtag:latesttarget_docker_registry:octocat/hello-worldtarget_tags:&#34;${build_commit:0:8}&#34; secrets users should refrain from configuring sensitive information their pipeline plain text. internal accepts following parameters authentication: parameter variable api_key artifactory_api_key, config_api_key, parameter_api_key password artifactory_password, config_password, parameter_password username artifactory_username, config_username, parameter_username can use substitute these values at runtime: copy_artifacts secrets: artifactory_password copy libs-snapshot-local/foo.txt target: libs-snapshot-local/bar.txt username: octocat password: supersecretpassword example will add step as variables: artifactory_username= artifactory_password= external /vela/parameters/config/artifactory/api_key, /vela/secrets/artifactory/api_key /vela/parameters/config/artifactory/password, /vela/secrets/artifactory/password /vela/parameters/config/artifactory/username, /vela/secrets/artifactory/username read stored /vela/secrets/: used configure name description required default action perform against n/a api key communication with false dry_run log_level log level info path source/target artifact(s) url instance communicate user flat removing directory hierarchy recursive sub-directories target delete target_repo docker registry containing image docker_registry target_docker_registry tag promoting target_tags final tags after promotion instead moving set-prop props include_dirs including regexp reading sources regular expression list template coming soon! troubleshooting you start by tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/tutorials/bash/",
    "display": "Pipeline/Tutorials/Bash",
    "title": "Bash",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from bash documentation: the gnu project&rsquo;s shell. bourne an sh-compatible shell incorporates useful features korn (ksh) (csh). it intended conform ieee posix p1003.2/iso 9945.2 tools standard. offers functional improvements over sh for both programming interactive use. addition, most scripts can run by without modification. code plugin using bash, we&rsquo;ll need first decide what task want accomplish. example, we&rsquo;re going script runs curl command provided input: #!/usr/bin/env import method parameter environment method=${parameter_method} body body=${parameter_body} url url=${parameter_url} send request input -x &#34;${method}&#34; -d &#34;${body}&#34; &#34;${url}&#34; example of section go-vela/vela-tutorials repository. image once have executable needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup when executed: fromalpinerun apk add --update --no-cache ca-certificates curlcopy vela-sample.sh /bin/vela-sample.shentrypoint [&#34;bash&#34;, &#34;/bin/vela-sample.sh&#34;] target/vela-sample docker publishing order pipeline, make sure build publish registry: -t target/vela-sample:bash push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired executed locally via line: --rm -e parameter_body=&#34;this sample vela written with bash&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplebashpluginimage:target/vela-sample:bashpull:trueparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/api/admin/build/",
    "display": "Api/Admin/Build",
    "title": "Build",
    "content": "endpoint get /api/v1/admin/builds permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/builds&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;running&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474204, &#34;created&#34;: &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;second commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;ed95dcc0687c&#34;, &#34;runtime&#34;: &#34;distribution&#34;: &#34;&#34; }, 1563474077, 1563474076, &#34;first &#34;82823eb770b0&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/build/",
    "display": "Concepts/System/Build",
    "title": "Build",
    "content": "the build component part of core system components for vela. defined as single, ephemeral execution pipeline. comprised one many services steps that contain instructions to execute from typically created hook triggered by repo source control provider. fields following make up component: name type description author string commit branch base_ref sha clone full url int64 unix timestamp when was deploy environment targeted deployment distribution operating executed on email enqueued published queue error message received during time event finished completed host hostname id unique identifier link navigatable number int parent previous ref reference repo_id runtime with sender started status signifies end condition title stored configured vela backend builds table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/registry/captains_log/",
    "display": "Pipeline/Registry/Captains log",
    "title": "Captain's Log",
    "content": "overview the captain&rsquo;s log plugin enables ability to manage release logs through slack vela pipeline. source code: https://github.com/target/captains-log registry: https://hub.docker.com/r/target/captains-log usage basic steps:-name:captains-logimage:target/captains-log:1pull:truesecrets:[github_token,slack_url]parameters:github_owner:targetgithub_repo:captains-loggithub_tag_id:&#34;v([0-9]+-release)$&#34;enterprise_host:https://git.myteam.comjira_team_domain:myteamnamespace utilize teams organization: steps:-name:captains-logimage:target/captains-log:1pull:truesecrets:[github_token,slack_url]parameters:github_owner:targetgithub_repo:captains-loggithub_tag_id:&#34;v([0-9]+-release)$&#34;enterprise_host:https://git.myteam.comjira_team_domain:myteamnamespaceteams:-name:team1color:&#34;#ffdc18&#34;emoji:&#34;✨&#34;mentions:&#34;&lt;@person1&gt; &lt;@person2&gt;&#34;issuetracking:jira:projects:-team1-team1subgroup-name:team2color:&#34;#f48642&#34;emoji:&#34;🔥&#34;mentions:&#34;&lt;@person3&gt;&#34;issuetracking:jira:projects:-team2 secrets users should refrain from configuring sensitive information their pipeline plain text. accepts following parameters for authentication: parameter environment variable configuration github_token slack_token slack_url can use substitute these values at runtime: steps: name: captains-log image: target/captains-log:1 pull: true secrets: github_token, parameters: github_owner: target github_repo: github_tag_id: &#34;v([0-9]+-release)$&#34; enterprise_host: https://git.myteam.com jira_team_domain: myteamnamespace github_token: supersecrettoken slack_url: https://hooks.slack.com/services/super/secret/url example will add step as variables: github_token= slack_url= more on options, visit documentation. https://target.github.io/captains-log/#/configuration/ "
    },

    {
    "url": "https://go-vela.github.io/docs/api/repo/chown/",
    "display": "Api/Repo/Chown",
    "title": "Chown",
    "content": "endpoint patch /api/v1/repos/:org/:repo/chown parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/chown&#34; response github/octocat changed owner "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/repo/chown/",
    "display": "Cli/Repo/Chown",
    "title": "Chown",
    "content": "command vela chown repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; changed owner "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/repo/chown/",
    "display": "Go/Repo/Chown",
    "title": "Chown",
    "content": "function func (svc *reposervice) chown(org, repo string) (*string, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description org of organization repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/commands/",
    "display": "Pipeline/Steps/Commands",
    "title": "Commands",
    "content": "the commands component part of step for vela. declaration allows you to provide execution instructions run inside container. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: build image: golang commands: go test ./... pipeline will execute first, then step. using above example, provided are converted simple shell script that looks like: #!/bin/sh set -e turn, executed as docker entrypoint container: --entrypoint=build.sh "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/compiler/",
    "display": "Infrastructure/Server/Compiler",
    "title": "Compiler",
    "content": "the compiler component one of server components for vela. defines system vela uses transforming pipeline into an executable representation worker. "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/conditional/",
    "display": "Templates/Tutorials/Conditional",
    "title": "Conditionals",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template conditional: {{if pipeline}} t1 {{end}} value of pipeline empty, output generated; otherwise, executed. empty values are false, 0, any nil pointer interface value, array, slice, map, string length zero. dot unaffected. information if/else statements see conditional docs sample let&rsquo;s take look at using with variable template: metadata:template:true{{$br:=.branch}}steps:-name:testcommands:-gotest./...image:{{.image}}{{.pull_policy}}ruleset:event:[push,pull_request]# branch equals master add step final pipeline{{if(eq$br&#34;master&#34;)}}-name:buildcommands:-gobuildimage:{{.image}}{{.pull_policy}}ruleset:event:[push,pull_request]{{end}} caller could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:sampletemplate:name:golangvars:image:golang:latestpull_policy:&#34;pull: true&#34;branch:master which means compiled execution worker is: version:&#34;1&#34;steps:-name:sample_testcommands:-gotest./...image:golang:latestpull:trueruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildimage:golang:latestpull:trueruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/database/",
    "display": "Infrastructure/Server/Database",
    "title": "Database",
    "content": "the database component one of server components for vela. defines system vela uses storing its data at rest. an organized collection information necessary platform to operate. configuration following options are used configure component: name environment description database.driver database_driver type client control operate database.config database_config full connection string database.connection.open database_connection_open total number open connections database.connection.idle database_connection_idle idle database.connection.life database_connection_life amount time reusable all available support vela_* prefixes variables. example: vela_database_driver drivers documentation sqlite3 sqlite storage https://www.sqlite.org postgres postgresql https://www.postgresql.org limitations these known archives by default, does not perform any archival data. currently, functionality considered out scope project should be responsibility admins installation. we recommend reviewing third party tools provided vendor achieve functionality. backups creation create your system. migration handle migrations. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/detach/",
    "display": "Pipeline/Steps/Detach",
    "title": "Detach",
    "content": "the detach component part of step for vela. declaration allows you to run container detached (headless) state. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang commands: go ./... build detach: true ./main -http=:8080 pipeline will execute first, then finally step. "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/registry/docker/",
    "display": "Pipeline/Registry/Docker",
    "title": "Docker",
    "content": "overview plugin enables the ability to build publish docker images vela pipeline. source code: https://github.com/go-vela/vela-docker registry: https://hub.docker.com/r/target/vela-docker supports environment (parameter_*) volume (/vela/parameters/*) configuration for setting parameters. precedence order take files then variables if both are set container. usage sample of building publishing an image: steps:-name:publish_hello-worldimage:target/vela-docker:v0.2.1pull:trueparameters:registry:index.docker.iorepo:index.docker.io/octocat/hello-world image without publishing: steps: name: publish_hello-world target/vela-docker:v0.2.1 pull: true parameters: dry_run: index.docker.io repo: index.docker.io/octocat/hello-world with custom tags: latest foobar automatic auto_tag: arguments: build_args: foo=bar caching: cache: cache_repo: labels: hello=world secrets users should refrain from configuring sensitive information their pipeline plain text. internal accepts following parameters authentication: parameter variable password docker_password, registry_password, parameter_password username docker_username, registry_username, parameter_username can use substitute these values at runtime: secrets: docker_password username: octocat password: supersecretpassword example will add step as variables: docker_username= docker_password= external /vela/parameters/docker/registry/password, /vela/secrets/docker/registry/password, /vela/secrets/docker/password /vela/parameters/docker/registry/username, /vela/secrets/docker/registry/username, /vela/secrets/docker/username read stored /vela/secrets/: injects several variables, by default, that load automatically. used configure name description required default auto_tag tagging automatically false build_args passed build-time n/a cache enable caching layers cache_repo specific repo context path dockerfile file dry_run event generated labels unique log_level log level info communication registry repository sha sha-1 hash commit tag tags target stage user template coming soon! troubleshooting you start tuning logs being displayed: log_level: trace below list common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/registry/downstream/",
    "display": "Pipeline/Registry/Downstream",
    "title": "Downstream",
    "content": "overview plugin enables the ability to trigger builds for other repos vela pipeline. source code: https://github.com/go-vela/vela-downstream registry: https://hub.docker.com/r/target/vela-downstream supports environment (parameter_*) volume (/vela/parameters/*) configuration setting parameters. precedence order take files then variables if both are set container. usage will only search up last 500 your build history. sample of triggering downstream build: steps:-name:trigger_hello-worldimage:target/vela-downstream:v0.2.0pull:trueparameters:branch:masterrepos:-octocat/hello-worldserver:https://vela-server.localhost multiple repos: steps: name: trigger_multiple trigger_hello-world image: target/vela-downstream:v0.2.0 pull: true parameters: branch: master octocat/hello-world go-vela/hello-world server: https://vela-server.localhost with different branches: use symbol at end org/repo provide unique branch per repo. octocat/hello-world@test go-vela/hello-world@stage secrets users should refrain from configuring sensitive information their pipeline plain text. internal accepts following parameters authentication: parameter variable token config_token, downstream_token, parameter_token, vela_token can substitute these values runtime: secrets: downstream_token token: supersecretvelatoken example add step as variables: downstream_token= external /vela/parameters/downstream/config/token, /vela/secrets/downstream/config/token read stored /vela/secrets/: used configure name description required default on log_level log level info list names n/a server communicate communication template coming soon! troubleshooting you start by tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/secrets/engine/",
    "display": "Pipeline/Secrets/Engine",
    "title": "Engine",
    "content": "the engine component part of secret for vela. declaration allows you to provide name storage backend fetch from. has default value native. options following are available configure component: description native uses vela database vault hashicorp instance designed store secrets database. instance. information refer vault&rsquo;s documentation. currently not supported. using coming soon! syntax an example valid version: &#34;1&#34; metadata: template: false secrets: name: username engine: key: github/octocat/username type: repo password github/octocat/password steps: test image: golang username, commands: echo &#34;machine github.com&#34; &gt; .netrc &#34;login ${username}&#34; &#34;password ${password}&#34; go ./... pipeline will allow be referenced: also add environment variables step: username=&lt;value&gt; password=&lt;value&gt; "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/entrypoint/",
    "display": "Pipeline/Services/Entrypoint",
    "title": "Entrypoint",
    "content": "the entrypoint component part of service for vela. declaration allows you to provide command execute inside container. syntax following an example valid component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 entrypoint: &#34;/docker-entrypoint.sh&#34; steps: test golang environment: database_driver: database_config: &#39;postgres://postgres@postgres:5432/postgres?sslmode=disable&#39; commands: go ./... pipeline will start first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/entrypoint/",
    "display": "Pipeline/Steps/Entrypoint",
    "title": "Entrypoint",
    "content": "the entrypoint component part of step for vela. declaration allows you to provide command execute inside container. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang entrypoint: /usr/local/go/bin/go commands: go ./... build pipeline will first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/environment/",
    "display": "Pipeline/Services/Environment",
    "title": "Environment",
    "content": "the environment component part of service for vela. declaration allows you to provide variables injected into container environment. syntax following an example valid component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 environment: postgres_db: postgres_user: steps: test golang database_driver: database_config: &#39;postgres://example@postgres:5432/example?sslmode=disable&#39; commands: go ./... pipeline will start first, then run step. defaults are every service: build key value explanation build_author octocat author from source commit build_author_email octocat@github.com email build_branch master branch build_channel vela queue channel was published build_commit 7fd1a60b01f91b314f59955a4e4d4e80d8edf11d sha build_created 1556720958 unix timestamp representing creation time build_enqueued 1556730001 enqueue build_event push webhook event that triggered build_finished 1556730045 completion build_host vela-worker-1 fully qualified domain name worker executed on build_link https://vela-server.localhost/octocat/hello-world/1 link ui build_message merge pull request #6 octocat/patch-1 message build_number number build_parent previous build_ref refs/heads/master reference build_started build_source https://github.com/octocat/hello-world/commit/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d build_title received https://github.com/octocat title build_workspace /vela/src/github.com/octocat/hello-world working directory build_tag v1.0.0 tag populated build_pull_request_number not if server configured headless (no ui). only during events. pull_request true vela_addr vela-server.localhost vela_channel vela_database database connected vela_host vela_queue redis vela_runtime docker runtime vela_source github vela_version v0.1.0 version vela_workspace /vela/src/github.com/github/octocat/hello-world ci enabled repository repository_branch default repository_clone https://github.com/octocat/hello-world.git clone url repository_full_name octocat/hello-world full repository_link https://github.com/octocat/hello-world direct repository_name hello-world repository_org org repository_private privacy setting repository_timeout 60 timeout repository_trusted trusted "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/environment/",
    "display": "Pipeline/Steps/Environment",
    "title": "Environment",
    "content": "the environment component part of step for vela. declaration allows you to provide variables injected into container environment. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang environment: cgo_enabled: &#39;0&#39; goos: linux goarch: amd64 commands: go ./... build pipeline will execute first, then run step. defaults are every step: key value explanation build_author octocat author from source commit build_author_email octocat@github.com email build_branch master branch build_channel vela queue channel was published build_commit 7fd1a60b01f91b314f59955a4e4d4e80d8edf11d sha build_created 1556720958 unix timestamp representing creation time build_enqueued 1556730001 enqueue build_event push webhook event that triggered build_finished 1556730045 completion build_host vela-worker-1 fully qualified domain name worker executed on build_link https://vela-server.localhost/octocat/hello-world/1 link ui build_message merge pull request #6 octocat/patch-1 message build_number number build_parent previous build_pull_request_number populated reference build_ref refs/heads/master build_started start build_source https://github.com/octocat/hello-world/commit/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d build_title received https://github.com/octocat title build_workspace /vela/src/github.com/octocat/hello-world working directory build_tag v1.0.0 tag build_target production deployment target not if server configured headless (no ui). only during pull_request events. true vela_addr vela-server.localhost vela_channel vela_database postgres database connected vela_host vela_queue redis vela_runtime docker runtime vela_source github vela_version v0.1.0 version vela_workspace ci enabled repository repository_branch default repository_clone https://github.com/octocat/hello-world.git clone url repository_full_name octocat/hello-world full repository_link https://github.com/octocat/hello-world direct repository_name hello-world repository_org org repository_private privacy setting repository_timeout 60 timeout repository_trusted trusted "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/worker/executor/",
    "display": "Infrastructure/Worker/Executor",
    "title": "Executor",
    "content": "the executor component one of worker components for vela. coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/worker/flavor/",
    "display": "Pipeline/Worker/Flavor",
    "title": "Flavor",
    "content": "the flavor component part of template for vela. declaration allows you to route your build single flavors within vela cluster. syntax following an example valid component: version: &#34;1&#34; metadata: template: false worker: flavor: large steps: name: test image: golang commands: go ./... pipeline will start run on worker with available "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/completion/generate/",
    "display": "Cli/Completion/Generate",
    "title": "Generate",
    "content": "command vela generate completion &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables bash auto-completion script vela_bash, completion_bash zsh vela_zsh, completion_zsh permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --bash response #! /bin/bash _cli_bash_autocomplete() if [[ &#34;${comp_words[0]}&#34; != &#34;source&#34; ]]; then local cur opts base compreply=() cur=&#34;${comp_words[comp_cword]}&#34; &#34;$cur&#34; == &#34;-&#34;* opts=$( ${comp_words[@]:0:$comp_cword} ${cur} --generate-bash-completion else fi compreply=( $(compgen -w &#34;${opts}&#34; -- ${cur}) return complete -o bashdefault default nospace -f _cli_bash_autocomplete permanent automatic covers how enable your terminal permanently. version of greater than 4. check with: &ndash;version older 4, use brew newer version. v2 bash-completion@2 copy &gt;&gt; /usr/local/etc/bash_completion.d/vela.sh update profile with export bash_completion_compat_dir=&#34;/usr/local/etc/bash_completion.d&#34; $home/.bash_profile -r &#34;/usr/local/etc/profile.d/bash_completion.sh&#34; ]] &amp;&amp; source current &lt;(vela --zsh) $home/.zshrc you&rsquo;re met an error like: complete:13: not found: compdef need add top $home/.zshrc: autoload -uz compinit "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/config/generate/",
    "display": "Cli/Config/Generate",
    "title": "Generate",
    "content": "command vela generate config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables api.addr full url api server vela_addr, config_addr api.token user token from vela_token, config_token api.version version of vela_api_version, config_api_version log.level set level logging vela_log_level, config_log_level output format results vela_output, config_output org organization calls vela_org, config_org repo repository vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --api.addr https://vela-server.localhost --api.token supersecrettoken response api: addr: token: version: &#34;1&#34; log: level: info "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/pipeline/generate/",
    "display": "Cli/Pipeline/Generate",
    "title": "Generate",
    "content": "command vela generate pipeline &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables file of vela_file, pipeline_file path vela_path, pipeline_path stages generates with vela_stages, pipeline_stages type being generated vela_type, pipeline_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request response &#34;.vela.yml&#34; go "
    },

    {
    "url": "https://go-vela.github.io/docs/api/build/get/",
    "display": "Api/Build/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;running&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474204, &#34;created&#34;: &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;second commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;ed95dcc0687c&#34;, &#34;runtime&#34;: &#34;distribution&#34;: &#34;&#34; }, 1563474077, 1563474076, &#34;first &#34;82823eb770b0&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/deployment/get/",
    "display": "Api/Deployment/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/deployments/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/2&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;ref&#34;: &#34;master&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;target&#34;: &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; }, &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/hook/get/",
    "display": "Api/Hook/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/hooks/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; }, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/repo/get/",
    "display": "Api/Repo/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/secret/get/",
    "display": "Api/Secret/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/secrets/:engine/:type/:org/:name parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: null, &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] }, 2, &#34;bar&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/service/get/",
    "display": "Api/Service/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 }, &#34;clone&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/step/get/",
    "display": "Api/Step/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; }, &#34;clone&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/user/get/",
    "display": "Api/User/Get",
    "title": "Get",
    "content": "endpoint get /api/v1/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users&#34; response &#34;id&#34;: 2, &#34;name&#34;: &#34;octocat&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false }, 1, &#34;octokitty&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/build/get/",
    "display": "Cli/Build/Get",
    "title": "Get",
    "content": "command vela get build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization builds vela_org, build_org repo repository vela_repo, build_repo output format vela_output, build_output page prints specific vela_page, build_page per.page number print per vela_per_page, build_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response status event branch duration failure push master 45s 50s success 54s 55s pending ... "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/deployment/get/",
    "display": "Cli/Deployment/Get",
    "title": "Get",
    "content": "command vela get deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization deployments vela_org, deployment_org repo repository vela_repo, deployment_repo output format vela_output, deployment_output page prints specific vela_page, deployment_page per.page number print per vela_per_page, deployment_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response id task user ref target deploy:vela master production "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/hook/get/",
    "display": "Cli/Hook/Get",
    "title": "Get",
    "content": "command vela get hook &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization hooks vela_org, hook_org repo repository vela_repo, hook_repo output format vela_output, hook_output page prints specific vela_page, hook_page per.page number print per vela_per_page, hook_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response status event branch failure push master success "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/log/get/",
    "display": "Cli/Log/Get",
    "title": "Get",
    "content": "command vela get log &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, log_org repo repository vela_repo, log_repo build number vela_build, log_build output format logs vela_output, log_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response git init initialized empty /vela/src/github.com/github/octocat/.git/ remote add origin https://github.com/github/octocat.git --verbose (fetch) (push) fetch --no-tags refs/heads/master from https://github.com/github/octocat branch master -&gt; fetch_head [new branch] origin/master reset --hard afafce5e33a8efd4340613b31a953107d6dec3a3 head now at afafce5 dummy commit echo &#34;hello world!&#34; hello world! "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/repo/get/",
    "display": "Cli/Repo/Get",
    "title": "Get",
    "content": "command vela get repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output page prints specific repositories vela_page, repo_page per.page number print per vela_per_page, repo_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request response org/repo status events visibility branch github/octocat true push,pull_request public master "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/secret/get/",
    "display": "Cli/Secret/Get",
    "title": "Get",
    "content": "command vela get secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization secrets vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat response events foo github/octocat push,pull_request "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/service/get/",
    "display": "Cli/Service/Get",
    "title": "Get",
    "content": "command vela get service &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization services vela_org, service_org repo repository vela_repo, service_repo build number vela_build, service_build output format vela_output, service_output page prints specific vela_page, service_page per.page print per vela_per_page, service_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response status runtime duration publish failure 1s success 17s test 10s clone 2s "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/step/get/",
    "display": "Cli/Step/Get",
    "title": "Get",
    "content": "command vela get step &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization steps vela_org, step_org repo repository vela_repo, step_repo build number vela_build, step_build output format vela_output, step_output page prints specific vela_page, step_page per.page print per vela_per_page, step_per_page also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response status runtime duration publish failure 1s success 17s test 10s clone 2s "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/build/get/",
    "display": "Go/Build/Get",
    "title": "Get",
    "content": "function func (svc *buildservice) getall(org, repo string, opt *listoptions) (*[]library.build, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description org of organization repository options listing builds permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/repo/get/",
    "display": "Go/Repo/Get",
    "title": "Get",
    "content": "function func (svc *reposervice) getall(opt *listoptions) (*[]library.repo, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description opt options listing repos permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example of here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/secret/get/",
    "display": "Go/Secret/Get",
    "title": "Get",
    "content": "function func (svc *secretservice) getall(engine, stype, org, name string, opt *listoptions) (*[]library.secret, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: description engine of secret stype type org organization repository team options listing builds permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/service/get/",
    "display": "Go/Service/Get",
    "title": "Get",
    "content": "function func (svc *svcservice) getall(org, repo string, build int, opt *listoptions) (*[]library.service, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description org of organization repository number options listing services permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/step/get/",
    "display": "Go/Step/Get",
    "title": "Get",
    "content": "function func (svc *stepservice) getall(org, repo string, build int, opt *listoptions) (*[]library.step, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description org of organization repository number options listing steps permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/registry/git/",
    "display": "Pipeline/Registry/Git",
    "title": "Git",
    "content": "overview plugin automatically injected into every pipeline for the source repository. enables ability to clone repositories vela build workspace. code: https://github.com/go-vela/vela-git registry: https://hub.docker.com/r/target/vela-git supports environment (parameter_*) volume (/vela/parameters/*) configuration setting parameters. precedence order take files then variables if both are set container. usage sample of cloning repository: steps:-name:clone_hello-worldimage:target/vela-git:v0.3.0pull:trueparameters:path:hello-worldref:refs/heads/masterremote:https://github.com/octocat/hello-world.gitsha:7fd1a60b01f91b314f59955a4e4d4e80d8edf11d repository with submodules: steps: name: clone_hello-world image: target/vela-git:v0.3.0 pull: true parameters: path: hello-world ref: refs/heads/master remote: https://github.com/octocat/hello-world.git sha: 7fd1a60b01f91b314f59955a4e4d4e80d8edf11d tags: secrets users should refrain from configuring sensitive information their plain text. internal accepts following parameters authentication: parameter variable netrc_password git_password, parameter_netrc_password, vela_netrc_password netrc_username git_username, parameter_netrc_username, vela_netrc_username can use substitute values at runtime: secrets: git_password netrc_username: octocat netrc_password: supersecretpassword /vela/src/github.com/octocat/hello-world example will add step as variables: git_username= git_password= external /vela/parameters/git/netrc/password, /vela/secrets/git/netrc/password /vela/parameters/git/netrc/username, /vela/secrets/git/netrc/username these read stored /vela/secrets/: injects several variables, by default, that load automatically. used configure name description required default log_level log level info netrc_machine machine communicate github.com password authentication user path local ref reference generated commit remote full url sha sha-1 hash submodules fetching false tags template coming soon! troubleshooting you start tuning logs being displayed: log_level: trace below list common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/tutorials/go/",
    "display": "Pipeline/Tutorials/Go",
    "title": "Go",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from go documentation: an open source programming language makes it easy build simple, reliable, efficient software. code plugin using go, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program http request the provided input: package main import &#34;fmt&#34; &#34;net/http&#34; &#34;os&#34; &#34;strings&#34; func main() // method parameter environment := os.getenv(&#34;parameter_method&#34;) body os.getenv(&#34;parameter_body&#34;) url os.getenv(&#34;parameter_url&#34;) payload strings.newreader(body) new input request, err http.newrequest(method, url, payload) if != nil fmt.println(err) os.exit(1) send capture response response, http.defaultclient.do(request) output fmt.println(response) example of section go-vela/vela-tutorials repository. executable now have accomplish our plugin&rsquo;s task, compile produce binary target platform: goos=linux goarch=amd64 cgo_enabled=0 -o vela-sample please ensure compiled right platform. it&rsquo;s not, may fail properly run unclear error messages. image once needed dockerfile should contain setup when executed: fromgolang:alpinerun apk add --update --no-cache ca-certificatescopy /bin/vela-sampleentrypoint [&#34;/bin/vela-sample&#34;] target/vela-sample docker publishing order pipeline, make sure publish registry: -t target/vela-sample:go push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with go&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplegopluginimage:target/vela-sample:gopull:trueparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/api/admin/hook/",
    "display": "Api/Admin/Hook",
    "title": "Hook",
    "content": "endpoint get /api/v1/admin/hooks permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/hooks&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: 1, &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; }, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/hook/",
    "display": "Concepts/System/Hook",
    "title": "Hook",
    "content": "the hook component part of core system components for vela. defined as single, webhook object received from repo source control provider prompting vela to perform an action. most cases, processing involves fetching pipeline triggering build. github&rsquo;s documentation: webhooks provide way notifications be delivered external web server whenever certain actions occur on repository organization. fields following make up component: name type description branch string commit that triggered build_id int64 unique identifier build created unix timestamp when was error message during event host hostname id link full navigatable url number int repo_id status signifies end condition source_id stored configured backend hooks table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/image/",
    "display": "Pipeline/Services/Image",
    "title": "Image",
    "content": "the image component part of service for vela. declaration allows you to provide docker used create ephemeral container. all vela services will require an be provided. examples any valid publicly accessible registry can image:golangimage:golang:latestimage:golang:1.12image:library/golang:1.12image:index.docker.io/library/golangimage:index.docker.io/library/golang:1.12 above images would pull from golang repository. syntax following example component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 pull: true steps: test environment: database_driver: database_config: &#39;postgres://postgres@postgres:5432/postgres?sslmode=disable&#39; commands: go ./... pipeline start first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/image/",
    "display": "Pipeline/Steps/Image",
    "title": "Image",
    "content": "the image component part of step for vela. declaration allows you to provide docker used create ephemeral container. all vela steps will require an be provided. options any valid publicly accessible registry can image:golangimage:golang:latestimage:golang:1.12image:library/golang:1.12image:index.docker.io/library/golangimage:index.docker.io/library/golang:1.12 above images would pull from golang repository. syntax following example component: version: &#34;1&#34; metadata: template: false steps: name: test image: commands: go ./... build pipeline execute first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/secrets/key/",
    "display": "Pipeline/Secrets/Key",
    "title": "Key",
    "content": "the key component part of secret for vela. declaration allows you to provide path fetch from storage backend. inherits default value name. syntax following an example valid component: version: &#34;1&#34; metadata: template: false secrets: name: username engine: native key: github/octocat/username type: repo password github/octocat/password steps: test image: golang username, commands: echo &#34;machine github.com&#34; &gt; .netrc &#34;login ${username}&#34; &#34;password ${password}&#34; go ./... pipeline will allow secrets be referenced: also add environment variables step: username=&lt;value&gt; password=&lt;value&gt; "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/registry/kubernetes/",
    "display": "Pipeline/Registry/Kubernetes",
    "title": "Kubernetes",
    "content": "overview plugin enables the ability to manage resources kubernetes vela pipeline. source code: https://github.com/go-vela/vela-kubernetes registry: https://hub.docker.com/r/target/vela-kubernetes supports environment (parameter_*) volume (/vela/parameters/*) configuration for setting parameters. precedence order take files then variables if both are set container. usage sample of applying files: steps:-name:kubernetesimage:target/vela-kubernetes:v0.1.0pull:trueparameters:action:applyfiles:[kubernetes/common,kubernetes/dev/deploy.yml] pretending apply steps: name: image: target/vela-kubernetes:v0.1.0 pull: true parameters: action: dry_run: kubernetes/common, kubernetes/dev/deploy.yml patching containers steps:-name:kubernetesimage:target/vela-kubernetes:v0.1.0pull:trueparameters:action:patchfiles:[kubernetes/common,kubernetes/dev/deploy.yml]containers:-name:sampleimage:alpine:latest patch containers: alpine:latest watching status resources: steps:-name:kubernetesimage:target/vela-kubernetes:v0.1.0pull:trueparameters:action:statusstatuses:[sample] secrets users should refrain from configuring sensitive information their pipeline plain text. internal accepts following parameters authentication: parameter variable config config_file, kube_config, parameter_config can use substitute these values at runtime: secrets: kube_config config: --- apiversion: v1 kind: example will add step as variables: kube_config= external /vela/parameters/kubernetes/config/file, /vela/secrets/kubernetes/config/file read stored /vela/secrets/: used configure name description required default action perform against n/a cluster file false context communication with log_level log level info namespace path by dry_run list directories output statuses watch on timeout total time allowed 5m until resource completes template coming soon! troubleshooting you start tuning logs being displayed: log_level: trace below common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/log/",
    "display": "Concepts/System/Log",
    "title": "Log",
    "content": "the log component part of core system components for vela. defined as sequence records about actions performed by worker build. fields following make up component: name type description build_id int64 unique identifier build entry data []byte raw from id repo_id repo that triggered service_id service step_id step stored configured vela backend logs table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/api/build/logs/",
    "display": "Api/Build/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/logs&#34; response &#34;id&#34;: 1, &#34;step_id&#34;: &#34;build_id&#34;: &#34;repo_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; }, 2, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/service/logs/",
    "display": "Api/Service/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services/:service/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1/logs&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;service_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/step/logs/",
    "display": "Api/Step/Logs",
    "title": "Logs",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps/:step/logs parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1/logs&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;step_id&#34;: &#34;data&#34;: &#34;sgvsbg8sifdvcmxkiq==&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/build/logs/",
    "display": "Go/Build/Logs",
    "title": "Logs",
    "content": "function func (svc *buildservice) getlogs(org, repo string, build int) (*[]library.log, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/service/logs/",
    "display": "Go/Service/Logs",
    "title": "Logs",
    "content": "function func (svc *logservice) getservice(org, repo string, build, service int) (*library.log, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/step/logs/",
    "display": "Go/Step/Logs",
    "title": "Logs",
    "content": "function func (svc *logservice) getstep(org, repo string, build, step int) (*library.log, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/loops_maps/",
    "display": "Templates/Tutorials/Loops maps",
    "title": "Loops with Maps",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template range: {{range pipeline}} t1 {{end}} value of pipeline must be an array, slice, map, channel. has length zero, nothing output; otherwise, dot set successive elements map executed. keys are basic type with defined order, will visited sorted key order. information range/else statements see conditional docs sample let&rsquo;s take look at ranging over template: metadata:template:truesteps:{{range$key,$value:=.images}}-name:test{{$key}}commands:-gotest./...image:{{$value}}{{.pull_policy}}ruleset:event:[push,pull_request]{{end}}-name:buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latest{{.pull_policy}}ruleset:event:[push,pull_request] caller could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:sampletemplate:name:golangvars:pull_policy:&#34;pull: true&#34;images:_latest:golang:latest_1.13:golang:1.13_1.12:golang:1.13 which means compiled execution worker is: does not guarantee order maps. you need steps always outputted same use loops slice implementation. version:&#34;1&#34;steps:-name:sample_test_latestcommands:-gotest./...image:golang:latestpull:trueruleset:event:[push,pull_request]-name:sample_test_1.13commands:-gotest./...image:golang:1.13pull:trueruleset:event:[push,pull_request]-name:sample_test_1.12commands:-gotest./...image:golang:1.12pull:trueruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:trueruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/loops_slice/",
    "display": "Templates/Tutorials/Loops slice",
    "title": "Loops with Slices",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from template range: {{range pipeline}} t1 {{end}} value of pipeline must be an array, slice, map, channel. has length zero, nothing output; otherwise, dot set successive elements map executed. keys are basic type with defined order, will visited sorted key order. information range/else statements see conditional docs sample let&rsquo;s take look at ranging over slice template: metadata:template:truesteps:{{range$value:=.images}}-name:test_{{$value}}commands:-gotest./...image:{{$value}}{{.pull_policy}}ruleset:event:[push,pull_request]{{end}}-name:buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latest{{.pull_policy}}ruleset:event:[push,pull_request] caller could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:sampletemplate:name:golangvars:pull_policy:&#34;pull: true&#34;images:[golang:latest,golang:1.13,golang:1.12s] which means compiled execution worker is: version:&#34;1&#34;steps:-name:sample_test_latestcommands:-gotest./...image:golang:latestpull:trueruleset:event:[push,pull_request]-name:sample_test_golang:1.13commands:-gotest./...image:golang:1.13pull:trueruleset:event:[push,pull_request]-name:sample_test_golang:1.12commands:-gotest./...image:golang:1.12pull:trueruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:trueruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/metadata/",
    "display": "Concepts/Pipeline/Metadata",
    "title": "Metadata",
    "content": "the metadata component part of pipeline for vela. declaration allows extra information to be passed pipeline. fields following are used configure component: name description required template enables compiling as false syntax an example valid declaration: version: &#34;1&#34; +metadata: template: steps: name: test image: golang commands: go ./... build "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/tutorials/mulitline/",
    "display": "Templates/Tutorials/Mulitline",
    "title": "Multiline",
    "content": "we recommend reviewing go templates documentation before attempting to create template. if you&rsquo;re new yaml also the 1.2 spec for validation on syntax. overview from scalars: scalar literals, newlines are preserved below was taken literal example---| //|| /||//|| ||__ information more types of scalars read sample let&rsquo;s take look at using conditional with variable template: metadata:template:truesteps:{{.test}}-name:buildcommands:-gobuildenvironment:cgo_enabled:&#39;0&#39;goos:linuximage:golang:latestpull:trueruleset:event:[push,pull_request] caller template could like: version:&#34;1&#34;templates:-name:samplesource:github.com/&lt;org&gt;/&lt;repo&gt;/path/to/file/&lt;template&gt;.ymltype:githubsteps:-name:sampletemplate:name:golangvars:test:| name: testcommands:-gotest./...image:golang:latestpull:trueruleset:event:[push,pull_request] which means compiled pipeline execution worker is: version:&#34;1&#34;steps:-name:sample_testcommands:-gotest./...image:golang:latestpull:trueruleset:event:[push,pull_request]-name:sample_buildcommands:-gobuildimage:golang:latestpull:trueruleset:event:[push,pull_request] "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/stages/needs/",
    "display": "Pipeline/Stages/Needs",
    "title": "Needs",
    "content": "the needs component part of stage for vela. declaration allows you to provide other stages that must complete before starting current one. syntax following an example valid component: version: &#34;1&#34; metadata: template: false stages: test: steps: name: test image: golang commands: go ./... build: needs: build pipeline will execute first, then run stage. "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/tutorials/node/",
    "display": "Pipeline/Tutorials/Node",
    "title": "Node.js",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from node.js documentation: as an asynchronous event-driven javascript runtime, designed build scalable network applications. code plugin using node.js, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes http request the provided input: #!/usr/bin/env node const https require(&#34;https&#34;); url require(&#34;url&#34;); // import method parameter environment process.env.parameter_method; body process.env.parameter_body; uri process.env.parameter_url; capture full myurl url.parse(uri); options method: }; new input req https.request(myurl, options); exit immediately if errors req.on(&#34;error&#34;, () =&gt; process.exit(1); }); write req.write(process.env.parameter_body); send req.end(); example of section go-vela/vela-tutorials repository. image once have executable needed accomplish our plugin&rsquo;s task, dockerfile produce should contain script setup run when executed: fromnode:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.js /bin/vela-sample.jsentrypoint [&#34;node&#34;, &#34;/bin/vela-sample.js&#34;] target/vela-sample docker publishing order pipeline, make sure publish it registry: -t target/vela-sample:node push has added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with node.js&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplenodepluginimage:target/vela-sample:nodepull:trueparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/secrets/origin/",
    "display": "Pipeline/Secrets/Origin",
    "title": "Origin",
    "content": "the origin component part of secret for vela. declaration allows you to pull secrets from non-internal providers via plugins. see what plugins are supported how they integrate with vela build lifecycle page syntax following an example valid component: version: &#34;1&#34; metadata: template: false secrets: implicit definition. name: vault_token origin: vault external image: target/secret-vault parameters: addr: vault.company.com auth_method: token username: octocat items: source: secret/vela path: user steps: test golang username, password commands: cat /vela/secrets/user/name /vela/secrets/user/password more information on plugin usage docs "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/overview/",
    "display": "Docs/Plugins/Overview",
    "title": "Overview",
    "content": "note: before you begin your plugin journey we recommend the following pre-requisites: steps stages templates pipeline these plugins are designed to be used within steps, template pipelines. configuration works via environment variables that pass data from container at runtime. docker perform set of pre-defined actions. actions can for any number general tasks, including: deploying code publishing artifacts sending notifications much, much more&hellip; secret by default under an allow list available images installation. know which vela installation consulting system administrators. secrets yaml block tandem with workspace read provider write them into location (/vela/secrets) pipeline. using typically, configured as step should accept their variables. below example shows working together publish image registry: version:&#34;1&#34;steps:-name:pluginimage:target/vela-dockerpull:trueparameters:registry:index.docker.iorepo:index.docker.io/octocat/hello-worldsecrets:-name:vault_token-origin:name:pluginimage:target/secret-vaultpull:truesecrets:[vault_token]parameters:addr:vault.company.comauth_method:tokenitems:-source:secret/dockerpath:docker parameters block. variable passed block, will injected parameter_&lt;variable&gt;: version: &#34;1&#34; steps: name: image: target/vela-docker pull: true parameters: index.docker.io repo: index.docker.io/octocat/hello-world secrets: vault_token origin: vault target/secret-vault addr: vault.company.com auth_method: token items: source: secret/docker path: above example, would added containers: docker: parameter_registry=index.docker.io parameter_repo=index.docker.io/octocat/hello-world vault: parameter_addr=index.docker.io parameter_auth_method=index.docker.io/octocat/hello-world parameter_items={&quot;items&quot;: [{&quot;source&quot;: &quot;secret/docker&quot;}],&quot;path&quot;: &quot;docker&quot;} "
    },

    {
    "url": "https://go-vela.github.io/docs/templates/overview/",
    "display": "Docs/Templates/Overview",
    "title": "Overview",
    "content": "template pipeline with one to many defined steps that can be sourced into another pipeline. templates live any repository source control system are expanded at compile time create the final executable take form of generalized workflows across repositories complex like matrices single build. following yaml tags not valid inside pipeline: services: secrets: stages: templates: engines only supported engine go templates. we extend go&rsquo;s built-in functions by utilizing sprig library allow for more options on top syntax. let&rsquo;s look basic template: example will call it build.yml but does have required name. metadata:template:truesteps:-name:testandbuildcommands:-gotest./...-gobuildimage:{{.image}}pull:trueruleset:event:[push,pull_request] caller could like: version:&#34;1&#34;templates:-name:samplesource:github.com/octocat/hello-world/.vela/build.ymltype:githubsteps:-name:sampletemplate:name:golangvars:image:golang:latest "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/parameters/",
    "display": "Pipeline/Steps/Parameters",
    "title": "Parameters",
    "content": "the parameters component part of step for vela. declaration allows you to provide extra configuration variables plugin. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: plugin image: target/vela-docker:v0.1.0 pull: true parameters: registry: index.docker.io repo: index.docker.io/octocat/hello-world pipeline will add environment step: parameter_registry=index.docker.io parameter_repo=index.docker.io/octocat/hello-world "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/worker/platform/",
    "display": "Pipeline/Worker/Platform",
    "title": "Platform",
    "content": "the platform component part of template for vela. declaration allows you to route your build single within vela cluster. syntax following an example valid component: version: &#34;1&#34; metadata: template: false worker: platform: docker steps: name: test image: golang commands: go ./... pipeline will start run on worker with available "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/plugin/",
    "display": "Docs/Concepts/Plugin",
    "title": "Plugin",
    "content": "coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/ports/",
    "display": "Pipeline/Services/Ports",
    "title": "Ports",
    "content": "the ports component part of service for vela. declaration allows you to provide list map container pipeline. syntax following an example valid component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 ports: &#34;5432:5432&#34; steps: test golang environment: database_driver: database_config: &#39;postgres://postgres@postgres:5432/postgres?sslmode=disable&#39; commands: go ./... pipeline will start first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/privileged/",
    "display": "Pipeline/Steps/Privileged",
    "title": "Privileged",
    "content": "the privileged component part of step for vela. declaration allows you to run container with extra privileges. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang privileged: true commands: go ./... build pipeline will execute first, then step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/services/pull/",
    "display": "Pipeline/Services/Pull",
    "title": "Pull",
    "content": "the pull component part of service for vela. declaration allows you to automatically upgrade latest version image. vela will always attempt from its existing cache images. we recommend using whenever possible. syntax following an example valid component: version: &#34;1&#34; metadata: template: false services: name: postgres image: postgres:12 pull: true steps: test golang environment: database_driver: database_config: &#39;postgres://postgres@postgres:5432/postgres?sslmode=disable&#39; commands: go ./... pipeline start first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/pull/",
    "display": "Pipeline/Steps/Pull",
    "title": "Pull",
    "content": "the pull component part of step for vela. declaration allows you to automatically upgrade latest version image. vela will always attempt from its existing cache images. we recommend using whenever possible. syntax following an example valid component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang pull: true commands: go ./... build pipeline execute first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/tutorials/python/",
    "display": "Pipeline/Tutorials/Python",
    "title": "Python",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from python documentation: programming language lets you work quickly integrate systems more effectively. code plugin using python, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes an http request the provided input: #!/usr/bin/env import http.client os urlparse method parameter environment os.getenv[&#39;parameter_method&#39;] body os.getenv[&#39;parameter_body&#39;] url os.getenv[&#39;parameter_url&#39;] capture full uri urlparse(url) new connection conn http.client.httpsconnection(uri.hostname, uri.port) headers added {} send conn.request(method, uri.path, body, headers) response conn.getresponse() output print(response.read().decode(&#34;utf-8&#34;)) example of section go-vela/vela-tutorials repository. image once have script needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup run when executed: frompython:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.py /bin/vela-sample.pyentrypoint [&#34;python&#34;, &#34;/bin/vela-sample.py&#34;] target/vela-sample docker publishing order pipeline, make sure build publish it registry: -t target/vela-sample:python push has benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written with python&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplepythonpluginimage:target/vela-sample:pythonpull:trueparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/queue/",
    "display": "Infrastructure/Server/Queue",
    "title": "Queue",
    "content": "the queue component one of server components for vela. defines system vela uses publishing workloads to be completed by worker. configuration following options are used configure component: name environment description queue.driver queue_driver type client control operate queue.config queue_config full connection string queue.cluster queue_cluster configures cluster queue.routes queue_routes unique channels all available support vela_* prefixes variables. example: vela_queue_driver drivers documentation redis https://redis.io kafka https://kafka.apache.org not fully supported. using coming soon! limitations these known backups default, does perform any data. currently, functionality considered out scope project should responsibility admins database installation. we recommend reviewing third party tools provided vendor achieve functionality. creation create your system. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/worker/queue/",
    "display": "Infrastructure/Worker/Queue",
    "title": "Queue",
    "content": "the queue component one of worker components for vela. coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/api/build/remove/",
    "display": "Api/Build/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response github/octocat/1 deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/api/hook/remove/",
    "display": "Api/Hook/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response github/octocat/1 deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/api/repo/remove/",
    "display": "Api/Repo/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response github/octocat deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/api/secret/remove/",
    "display": "Api/Secret/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response repo/github/octocat/foo deleted from native service "
    },

    {
    "url": "https://go-vela.github.io/docs/api/service/remove/",
    "display": "Api/Service/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response github/octocat/1/1 deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/api/step/remove/",
    "display": "Api/Step/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response github/octocat/1/1 deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/api/user/remove/",
    "display": "Api/User/Remove",
    "title": "Remove",
    "content": "endpoint delete /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response octokitty deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/config/remove/",
    "display": "Cli/Config/Remove",
    "title": "Remove",
    "content": "command vela remove config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: providing will entire configuration file. name description environment variables api.addr removes api address field vela_addr, config_addr api.token token vela_token, config_token api.version version vela_api_version, config_api_version log.level log level vela_log_level, config_log_level output vela_output, config_output org vela_org, config_org repo vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request response "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/repo/remove/",
    "display": "Cli/Repo/Remove",
    "title": "Remove",
    "content": "command vela remove repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; was deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/secret/remove/",
    "display": "Cli/Secret/Remove",
    "title": "Remove",
    "content": "command vela remove secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo response &#34;foo&#34; was deleted "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/build/remove/",
    "display": "Go/Build/Remove",
    "title": "Remove",
    "content": "function func (svc *buildservice) remove(org, repo string, build int) (*string, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/repo/remove/",
    "display": "Go/Repo/Remove",
    "title": "Remove",
    "content": "function func (svc *reposervice) remove(org, repo string) (*string, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/secret/remove/",
    "display": "Go/Secret/Remove",
    "title": "Remove",
    "content": "function func (svc *secretservice) remove(engine, stype, org, name, secret string) (*string, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description engine of stype type org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/service/remove/",
    "display": "Go/Service/Remove",
    "title": "Remove",
    "content": "function func (svc *svcservice) remove(org, repo string, build, service int) (*string, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/step/remove/",
    "display": "Go/Step/Remove",
    "title": "Remove",
    "content": "function func (svc *stepservice) remove(org, repo string, build, step int) (*string, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/api/repo/repair/",
    "display": "Api/Repo/Repair",
    "title": "Repair",
    "content": "endpoint patch /api/v1/repos/:org/:repo/repair parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/repair&#34; response github/octocat repaired "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/repo/repair/",
    "display": "Cli/Repo/Repair",
    "title": "Repair",
    "content": "command vela repair &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org repo vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response &#34;github/octocat&#34; repaired "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/repo/repair/",
    "display": "Go/Repo/Repair",
    "title": "Repair",
    "content": "function func (svc *reposervice) repair(org, repo string) (*string, *response, error) for more information, you can view our go documentation. parameters the following are used to configure function: name description org of organization repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/api/admin/repo/",
    "display": "Api/Admin/Repo",
    "title": "Repo",
    "content": "endpoint get /api/v1/admin/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/repo/",
    "display": "Concepts/System/Repo",
    "title": "Repo",
    "content": "the repo component part of core system components for vela. defined as upstream dependency from source control provider used to store code trigger hooks github&rsquo;s repository documentation: like folder your project. project&rsquo;s contains all files stores each file&rsquo;s revision history. you can also discuss manage work within repository. fields following make up component: name type description active bool signifies current status allow_comment enable builds be triggered comment event allow_deploy deployment allow_pull pull_request allow_push push allow_tag tag branch string commit that build clone full url full_name unique (&lt;org&gt;/&lt;repo&gt;) hash secret generated by id int64 identifier link navigatable org private timeout total time allotted per execution trusted enables elevated permissions executed user_id user activated visibility access level required view vela stored configured backend repos table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/api/user/current/repos/",
    "display": "User/Current/Repos",
    "title": "Repos",
    "content": "endpoint get /api/v1/user/source/repos permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/user/source/repos&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false }, 2, &#34;octokitty&#34;, &#34;github/octokitty&#34;, &#34;https://github.com/github/octokitty&#34;, &#34;https://github.com/github/octokitty.git&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/build/restart/",
    "display": "Api/Build/Restart",
    "title": "Restart",
    "content": "endpoint post /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 2, &#34;repo_id&#34;: 1, &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/build/restart/",
    "display": "Cli/Build/Restart",
    "title": "Restart",
    "content": "command vela restart build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, build_org repo repository vela_repo, build_repo number vela_build, build_number output format vela_output, build_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response id: repo_id: number: parent: event: push status: created error: &#34;&#34; populates when platform runs into an error with enqueued: 1563474087 created: 1563474086 started: finished: deploy: clone: https://github.com/github/octocat.git source: https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163 title: received from https://github.com/github/octocat message: first commit... commit: 48afb5bdc41ad69bf22588491333f7cf71135163 sender: octokitty author: branch: master ref: refs/heads/master baseref: host: &#34;company.localhost&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/build/restart/",
    "display": "Go/Build/Restart",
    "title": "Restart",
    "content": "function func (svc *buildservice) restart(org, repo string, build int) (*library.build, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/tutorials/ruby/",
    "display": "Pipeline/Tutorials/Ruby",
    "title": "Ruby",
    "content": "we recommend reviewing docker&rsquo;s best practices before attempting to create custom plugin. that all plugins be placed inside scratch image. overview from ruby documentation: is&hellip; dynamic, open source programming language with focus on simplicity productivity. it has an elegant syntax natural read easy write. code plugin using ruby, we&rsquo;ll need first decide what task want accomplish. for example, we&rsquo;re going program makes http request the provided input: #!/usr/bin/env require &#39;net/http&#39; &#39;uri&#39; import method parameter environment env[&#39;parameter_method&#39;] body env[&#39;parameter_body&#39;] url env[&#39;parameter_url&#39;] capture full uri uri(url) new client net::http.new(uri.host, uri.port) send response http.send_request( method, uri.path, body, output puts response.read_body example of section go-vela/vela-tutorials repository. image once have script needed accomplish our plugin&rsquo;s task, dockerfile produce should contain setup run when executed: fromruby:alpinerun apk add --update --no-cache ca-certificatescopy vela-sample.rb /bin/vela-sample.rbentrypoint [&#34;ruby&#34;, &#34;/bin/vela-sample.rb&#34;] target/vela-sample docker publishing order pipeline, make sure build publish registry: -t target/vela-sample:ruby push added benefit enabling others community consume your plugin! troubleshooting verify performs desired can executed locally via command line: --rm -e parameter_body=&#34;this sample vela written ruby&#34; parameter_method=&#34;post&#34; parameter_url=&#34;http://vela.localhost.com&#34; usage after registry, referenced pipeline: version:&#34;1&#34;steps:-name:samplerubypluginimage:target/vela-sample:rubypull:trueparameters:url:http://vela.localhost.commethod:postbody:| "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/ruleset/",
    "display": "Pipeline/Steps/Ruleset",
    "title": "Ruleset",
    "content": "the ruleset component part of step for vela. declaration allows you to provide conditions limit execution container. simple fields following are used configure version component: name description required branch build false comment pull request body event path workspace files repo status tag reference target deployment syntax an example valid version: &#34;1&#34; metadata: template: steps: name: test image: golang ruleset: branch: master event: push commands: go ./... pipeline will steps to: builds with advanced continue enables continuing if fails limits all rules must match matcher use when evaluating operator unless can if: unless: also without type appendix rule matching branches. below run stage master: ruleset:branch:[stage,master] events. pull_request: ruleset:event:[push,pull_request] statuses. failure success: ruleset:status:[failure,success] references. ref dev/* test/*: ruleset:tag:[dev/*,test/*] targets. production: ruleset:target:[stage,production] changed repository. file readme.md, any *.md root directory test/* has changed: ruleset:path:[readme.md,&#34;*.md&#34;,&#34;test/*&#34;] comment. extends ability start new through interactions within request. added bottom ruleset:event:[comment]comment:[&#34;run build&#34;] "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/worker/runtime/",
    "display": "Infrastructure/Worker/Runtime",
    "title": "Runtime",
    "content": "the runtime component one of worker components for vela. coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/pipeline/registry/s3_cache/",
    "display": "Pipeline/Registry/S3 cache",
    "title": "S3 Cache",
    "content": "overview plugin enables you to cache build resources an s3 compatible store for vela pipeline. source code: https://github.com/go-vela/vela-s3-cache registry: https://hub.docker.com/r/target/vela-s3-cache supports environment (parameter_*) volume (/vela/parameters/*) configuration setting parameters. the precedence order take files then variables if both are set container. usage sample of restoring cache: steps:-name:restore_cacheimage:target/vela-s3-cache:v0.2.0pull:trueparameters:action:restoreroot:mybucketserver:mybucket.s3-us-west-2.amazonaws.com rebuilding steps:-name:rebuild_cacheimage:target/vela-s3-cache:v0.2.0pull:trueparameters:action:rebuildroot:mybucketserver:mybucket.s3-us-west-2.amazonaws.commount:-.gradle flushing steps:-name:flushing_cacheimage:target/vela-s3-cache:v0.2.0pull:trueparameters:action:flushroot:mybucketserver:mybucket.s3-us-west-2.amazonaws.com secrets users should refrain from configuring sensitive information their pipeline plain text. internal accepts following parameters authentication: parameter variable access_key aws_access_key_id, cache_s3_access_key, parameter_access_key secret_key aws_secret_access_key, cache_s3_secret_key, parameter_secret_key session_token aws_session_token, cache_s3_session_token, parameter_session_token can use substitute these values at runtime: steps: name: restore_cache image: target/vela-s3-cache:v0.2.0 pull: true secrets: cache_s3_secret_key parameters: action: restore root: mybucket server: mybucket.s3-us-west-2.amazonaws.com access_key: akiaiosfodnn7example secret_key: 123456789qwertyexample example will add step as variables: cache_s3_access_key= cache_s3_secret_key= external /vela/parameters/s3_cache/config/access_key, /vela/secrets/s3_cache/config/access_key /vela/parameters/s3_cache/config/secret_key, /vela/secrets/s3_cache/config/secret_key /vela/parameters/s3_cache/config/session_token, /vela/secrets/s3_cache/config/session_token read stored /vela/secrets/: used configure all image actions: name description required default action perform against n/a log_level log level info server instance communicate with access key communication secret root bucket prefix path object(s) filename object false mount file directories locations your timeout call rebuild flush age delete objects past specific 14 upload template coming soon! troubleshooting start by tuning logs being displayed: log_level: trace below list common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/api/admin/secret/",
    "display": "Api/Admin/Secret",
    "title": "Secret",
    "content": "endpoint get /api/v1/admin/secrets permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/secrets&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: null, &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] }, 2, &#34;bar&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/secret/",
    "display": "Infrastructure/Server/Secret",
    "title": "Secret",
    "content": "the secret component one of server components for vela. defines system vela uses storing accessing secrets. configuration following options are used to configure component: name environment description vault.driver secret_vault enables vault engine vault.addr secret_vault_addr full navigatable url installation vault.token secret_vault_token token required read/write secrets all available support vela_* prefixes variables. example: vela_secret_vault "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/secret/",
    "display": "Concepts/System/Secret",
    "title": "Secret",
    "content": "the secret component part of core system components for vela. defined as piece sensitive data information that you want to tightly control access to. these are extremely useful when trying avoid providing plain text. they typically include following list some examples secrets: api keys certificates passwords tokens much, much more&hellip; fields make up component: name type description allow_command bool enable injecting with commands declaration events []string whitelist permitted id int64 unique identifier images string org from source provider repo team store storage backend value stored configured vela secrets table. types available configure scoped any repository an organization single shared installation accessible by organization. requires have admin repository. installation. unique, because require exist your be member references cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/secrets/",
    "display": "Pipeline/Steps/Secrets",
    "title": "Secrets",
    "content": "the secrets component part of step for vela. declaration allows you to provide sensitive variables injected into container environment. any variable provided with will be as an upper case variable. simple following example valid syntax version component: version: &#34;1&#34; metadata: template: false steps: name: test image: golang secrets: git_username, git_password commands: echo &#34;machine github.com&#34; &gt; .netrc &#34;login ${git_username}&#34; &#34;password ${git_password}&#34; go ./... build pipeline add environment git_username=&lt;value&gt; git_password=&lt;value&gt; also execute first, then run step. advanced fields are used configure name description required source secret from rename true target inject source: username target: git_username password "
    },

    {
    "url": "https://go-vela.github.io/docs/api/admin/service/",
    "display": "Api/Admin/Service",
    "title": "Service",
    "content": "endpoint get /api/v1/admin/services permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/services&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 }, &#34;clone&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/service/",
    "display": "Concepts/System/Service",
    "title": "Service",
    "content": "the service component part of core system components for vela. defined as detached (headless), execution instruction pipeline. each executed inside an ephemeral docker container starts at beginning fields following make up component: name type description build_id int64 unique identifier build created unix timestamp when was distribution string operating on error message received during time exit_code int return code from finished completed host hostname id image used to create number repo_id repo that triggered runtime with started status signifies end condition stored configured vela backend services table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/infrastructure/server/source/",
    "display": "Infrastructure/Server/Source",
    "title": "Source",
    "content": "the source component one of server components for vela. defines system vela uses integrating with code. often referred to as version control provider. configuration following options are used configure component: name environment description source.driver source_driver type client operate source.url source_url full navigatable url source.client source_client oauth id source.secret source_secret secret source.context source_context message set commit status all available support vela_* prefixes variables. example: queue vela_source_driver drivers documentation github instance https://github.com/about gitlab https://about.gitlab.com not fully supported. using coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/templates/source/",
    "display": "Pipeline/Templates/Source",
    "title": "Source",
    "content": "the source component part of template for vela. declaration allows you to provide path remote system. syntax following an example valid component: version: &#34;1&#34; metadata: template: false templates name: source: github.com/vela/atlas/cmd type: github steps: test vars: cmd: go ./... build pipeline will execute step first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/api/admin/step/",
    "display": "Api/Admin/Step",
    "title": "Step",
    "content": "endpoint get /api/v1/admin/steps permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/steps&#34; response &#34;id&#34;: 2, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: 1, &#34;name&#34;: &#34;build&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; }, &#34;clone&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/step/",
    "display": "Concepts/System/Step",
    "title": "Step",
    "content": "the step component part of core system components for vela. defined as sequential, execution instruction pipeline. each executed inside an ephemeral docker container are always order they defined. fields following make up component: name type description build_id int64 unique identifier build created unix timestamp when was distribution string operating on error message received during time exit_code int return code from finished completed host hostname id image used to create number repo_id repo that triggered runtime with started status signifies end condition stage stored configured vela backend steps table. references api cli sdk go "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/stages/steps/",
    "display": "Pipeline/Stages/Steps",
    "title": "Steps",
    "content": "the steps component part of stage for vela. declaration allows you to provide sequential, execution instructions stage. more information, can visit documentation. syntax following an example valid component: version: &#34;1&#34; metadata: template: false stages: test: steps: name: test image: golang commands: go ./... build: build pipeline will execute at same time. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/steps/template/",
    "display": "Pipeline/Steps/Template",
    "title": "Template",
    "content": "the template component part of step for vela. declaration allows you to provide name expand pipeline. fields following are used configure component: description required unique identifier pipeline true vars variables injected into false syntax an example valid version: &#34;1&#34; metadata: template: templates name: source: github.com/vela/atlas/cmd type: github steps: test vars: cmd: go ./... build will execute first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/template/",
    "display": "Docs/Concepts/Template",
    "title": "Template",
    "content": "coming soon! "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/secrets/type/",
    "display": "Pipeline/Secrets/Type",
    "title": "Type",
    "content": "the type component part of secret for vela. declaration allows you to provide fetch from storage backend. has default value repo. options following are available configure component: name description org scoped any repository an organization repo single shared installation secrets with accessible by organization. requires have admin access repository. vela installation. these unique, because they require team exist your be member syntax example valid version: &#34;1&#34; metadata: template: false secrets: name: username engine: native key: github/octocat/username type: password github/octocat/password steps: test image: golang username, commands: echo &#34;machine github.com&#34; &gt; .netrc &#34;login ${username}&#34; &#34;password ${password}&#34; go ./... pipeline will allow referenced: also add environment variables step: username=&lt;value&gt; password=&lt;value&gt; "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/templates/type/",
    "display": "Pipeline/Templates/Type",
    "title": "Type",
    "content": "the type component part of template for vela. declaration allows you to provide provided from remote system. options following are available configure component: name description github fetches enterprise instance designed fetch templates enterprise. syntax an example valid version: &#34;1&#34; metadata: template: false name: source: github.com/vela/atlas/cmd type: steps: test vars: cmd: go ./... build pipeline will execute step first, then run step. "
    },

    {
    "url": "https://go-vela.github.io/docs/api/build/update/",
    "display": "Api/Build/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;message&#34;: &#34;this an updated message&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, message&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/hook/update/",
    "display": "Api/Hook/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;failure&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/repo/update/",
    "display": "Api/Repo/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;allow_tag&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/api/secret/update/",
    "display": "Api/Secret/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;events&#34;: [&#34;push&#34;, &#34;tag&#34;] curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], "
    },

    {
    "url": "https://go-vela.github.io/docs/api/service/update/",
    "display": "Api/Service/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;failure&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://go-vela.github.io/docs/api/step/update/",
    "display": "Api/Step/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;status&#34;: &#34;failure&#34; curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;failure&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/user/current/update/",
    "display": "User/Current/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/user permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. file &#34;admin&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/user&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, "
    },

    {
    "url": "https://go-vela.github.io/docs/api/user/update/",
    "display": "Api/User/Update",
    "title": "Update",
    "content": "endpoint put /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. file &#34;admin&#34;: true curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;content-type: application/json&#34; -d &#34;@data.json&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/config/update/",
    "display": "Cli/Config/Update",
    "title": "Update",
    "content": "command vela update config &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables api.addr updates api address field vela_addr, config_addr api.token token vela_token, config_token api.version version vela_api_version, config_api_version log.level log level vela_log_level, config_log_level output vela_output, config_output org vela_org, config_org repo vela_repo, config_repo secret.engine secret engine vela_engine, config_engine secret.type type vela_type, config_type permissions coming soon! sample section assumes have already installed setup cli. install cli, please review installation documentation. authentication request --org github response api: addr: https://vela-server.localhost token: supersecrettoken version: &#34;1&#34; log: level: info org: "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/repo/update/",
    "display": "Cli/Repo/Update",
    "title": "Update",
    "content": "command vela update repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name link full url vela_link, repo_link clone vela_clone, repo_clone visibility access level required view vela_visibility, repo_visibility timeout max time allowed per build vela_timeout, repo_timeout private disables public vela_private, repo_private trusted elevates permissions builds vela_trusted, repo_trusted active enables/disables vela_active, repo_active event events trigger vela_events, repo_events output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --event tag response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 visibility: private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/secret/update/",
    "display": "Cli/Secret/Update",
    "title": "Update",
    "content": "command vela update secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name value vela_value, secret_value image build image(s) access vela_images, secret_images event event(s) vela_events, secret_events commands allows step with vela_commands, secret_commands file secret(s) vela_file, secret_file output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo --value baz response &#34;foo&#34; was updated advanced input from updating single-line multi-line using symbol. syntax @/path/to/file example @$home/tmp/secret.txt secrets multiple filename parameter. -f secret.yml single yaml document ---metadata:version:v1engine:nativesecrets:-org:octocatrepo:githubname:foovalue:bartype:repoimages:-golang:latestevents:-push-pull_request-org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:-golang:latestevents:-push-pull_request ---metadata:version:v1engine:nativesecrets:-org:githubrepo:octocatname:foovalue:bartype:repoimages:-golang:latestevents:-push-pull_request---metadata:version:v1engine:vaultsecrets:-org:githubteam:octokittiesname:foo1value:&#34;@/path/to/file/bar1&#34;type:sharedimages:-golang:latestevents:-push-pull_request "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/build/update/",
    "display": "Go/Build/Update",
    "title": "Update",
    "content": "function func (svc *buildservice) update(org, repo string, *library.build) (*library.build, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository information on build permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/repo/update/",
    "display": "Go/Repo/Update",
    "title": "Update",
    "content": "function func (svc *reposervice) update(org, repo string, *library.repo) (*library.repo, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository information on permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/secret/update/",
    "display": "Go/Secret/Update",
    "title": "Update",
    "content": "function func (svc *secretservice) update(engine, stype, org, name string, *library.secret) (*library.secret, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: description engine of secret stype type org organization repository team information on permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/service/update/",
    "display": "Go/Service/Update",
    "title": "Update",
    "content": "function func (svc *svcservice) update(org, repo string, build int, *library.service) (*library.service, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository number information on service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/step/update/",
    "display": "Go/Step/Update",
    "title": "Update",
    "content": "function func (svc *stepservice) update(org, repo string, build int, *library.step) (*library.step, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository number information on step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/api/admin/user/",
    "display": "Api/Admin/User",
    "title": "User",
    "content": "endpoint get /api/v1/admin/users permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/admin/users&#34; response &#34;id&#34;: 2, &#34;name&#34;: &#34;octocat&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false }, 1, &#34;octokitty&#34;, "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/system/user/",
    "display": "Concepts/System/User",
    "title": "User",
    "content": "the user component part of core system components for vela. defined as personal account granted to each individual who registers fields following make up component: name type description active bool signifies current status admin enables elevated permissions builds executed repo favorites []string whitelist repos favorite ui hash string unique secret generated by id int64 identifier token access source control provider stored configured vela backend users table. references api "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/pipeline/validate/",
    "display": "Cli/Pipeline/Validate",
    "title": "Validate",
    "content": "command vela validate pipeline &lt;parameters...&gt; &lt;arguments...&gt; for more information, please run --help. parameters the following are used to configure command: name description environment variables file of vela_file, pipeline_file path vela_path, pipeline_path permissions coming soon! sample section assumes you have already installed setup cli. install cli, review installation documentation. authentication request response &#34;.vela.yml&#34; valid "
    },

    {
    "url": "https://go-vela.github.io/docs/plugins/secret/registry/vault/",
    "display": "Secret/Registry/Vault",
    "title": "Vault",
    "content": "overview plugin enables the ability pull secrets from vault into secret mount within vela pipeline. source code: https://github.com/go-vela/secret-vault registry: https://hub.docker.com/r/target/secret-vault usage sample of writing using token authentication: secrets:-origin:name:vaultimage:target/vela/secret-vault:latestparameters:addr:vault.company.comtoken:supersecretvaulttokenauth_method:tokenitems:# written to path: &#34;/vela/secrets/docker/&lt;key&gt;&#34;-source:secret/vela/usernamepath:docker reading ldap secrets: origin: name: image: target/vela/secret-vault:latest parameters: addr: vault.company.com username: octocat password: supersecretpassword token: supersecretvaulttoken auth_method: items: &#34;/vela/secrets/docker/&lt;key&gt;&#34; source: secret/vela/username docker authentication with verbose logging: log_level: trace note: users should refrain configuring sensitive information your pipeline plain text. used must exist as secrets. you can use substitute values at runtime: repo created vault_token example method secret: parameters following are configure name description required default addr address instance true n/a auth_method for interfacing (i.e. token, ldap) log_level set log level info password server false username read reading: items pretending perform apply template coming soon! troubleshooting below list common problems how solve them: "
    },

    {
    "url": "https://go-vela.github.io/docs/concepts/pipeline/version/",
    "display": "Concepts/Pipeline/Version",
    "title": "Version",
    "content": "the version component part of pipeline for vela. declaration allows you to provide syntax used evaluate pipeline. all vela pipelines will require be provided. following an example valid declaration: +version: &#34;1&#34; metadata: template: false steps: name: test image: golang commands: go ./... build "
    },

    {
    "url": "https://go-vela.github.io/docs/api/build/view/",
    "display": "Api/Build/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build parameters the following are used to configure endpoint: name description org of organization repo repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;number&#34;: &#34;parent&#34;: &#34;event&#34;: &#34;push&#34;, &#34;status&#34;: &#34;created&#34;, &#34;error&#34;: &#34;&#34;, &#34;enqueued&#34;: 1563474077, &#34;created&#34;: 1563474076, &#34;started&#34;: &#34;finished&#34;: 0, &#34;deploy&#34;: &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;source&#34;: &#34;https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;title&#34;: &#34;push received from https://github.com/github/octocat&#34;, &#34;message&#34;: &#34;first commit...&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;sender&#34;: &#34;octokitty&#34;, &#34;author&#34;: &#34;branch&#34;: &#34;master&#34;, &#34;ref&#34;: &#34;refs/heads/master&#34;, &#34;base_ref&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/deployment/view/",
    "display": "Api/Deployment/View",
    "title": "View",
    "content": "endpoint get /api/v1/deployments/:org/:repo/:deployment parameters the following are used to configure endpoint: name description org of organization repo repository deployment number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/deployments/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;url&#34;: &#34;https://api.github.com/repos/github/octocat/deployments/1&#34;, &#34;user&#34;: &#34;octocat&#34;, &#34;commit&#34;: &#34;48afb5bdc41ad69bf22588491333f7cf71135163&#34;, &#34;ref&#34;: &#34;master&#34;, &#34;task&#34;: &#34;deploy:vela&#34;, &#34;target&#34;: &#34;production&#34;, &#34;description&#34;: &#34;deployment from vela&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/hook/view/",
    "display": "Api/Hook/View",
    "title": "View",
    "content": "endpoint get /api/v1/hooks/:org/:repo/:hook parameters the following are used to configure endpoint: name description org of organization repo repository hook number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/hooks/github/octocat/1&#34; response &#34;id&#34;: 1, &#34;repo_id&#34;: &#34;build_id&#34;: &#34;number&#34;: &#34;source_id&#34;: &#34;c8da1302-07d6-11ea-882f-4893bca275b8&#34;, &#34;created&#34;: &#34;1563474076&#34;, &#34;host&#34;: &#34;github.com&#34;, &#34;event&#34;: &#34;push&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;error&#34;: &#34;&#34;, &#34;status&#34;: &#34;success&#34;, &#34;link&#34;: &#34;&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/repo/view/",
    "display": "Api/Repo/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo parameters the following are used to configure endpoint: name description org of organization repo repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat&#34; response &#34;id&#34;: 1, &#34;user_id&#34;: &#34;org&#34;: &#34;github&#34;, &#34;name&#34;: &#34;octocat&#34;, &#34;full_name&#34;: &#34;github/octocat&#34;, &#34;link&#34;: &#34;https://github.com/github/octocat&#34;, &#34;clone&#34;: &#34;https://github.com/github/octocat.git&#34;, &#34;branch&#34;: &#34;master&#34;, &#34;timeout&#34;: 60, &#34;visibility&#34;: &#34;public&#34;, &#34;private&#34;: false, &#34;trusted&#34;: true, &#34;active&#34;: &#34;allow_pull&#34;: &#34;allow_push&#34;: &#34;allow_deploy&#34;: &#34;allow_tag&#34;: &#34;allow_comment&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/api/secret/view/",
    "display": "Api/Secret/View",
    "title": "View",
    "content": "endpoint get /api/v1/secrets/:engine/:type/:org/:name/:secret parameters the following are used to configure endpoint: name description engine of type secret org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/secrets/native/repo/github/octocat/foo&#34; response &#34;id&#34;: 1, &#34;org&#34;: &#34;github&#34;, &#34;repo&#34;: &#34;octocat&#34;, &#34;team&#34;: &#34;&#34;, &#34;name&#34;: &#34;foo&#34;, &#34;value&#34;: &#34;type&#34;: &#34;repo&#34;, &#34;images&#34;: [&#34;alpine&#34;], &#34;events&#34;: [&#34;push&#34;] "
    },

    {
    "url": "https://go-vela.github.io/docs/api/service/view/",
    "display": "Api/Service/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/services/:service parameters the following are used to configure endpoint: name description org of organization repo repository build number service permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/services/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: 1563475420, &#34;finished&#34;: 1563475421 "
    },

    {
    "url": "https://go-vela.github.io/docs/api/step/view/",
    "display": "Api/Step/View",
    "title": "View",
    "content": "endpoint get /api/v1/repos/:org/:repo/builds/:build/steps/:step parameters the following are used to configure endpoint: name description org of organization repo repository build number step permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/repos/github/octocat/builds/1/steps/1&#34; response &#34;id&#34;: 1, &#34;build_id&#34;: &#34;repo_id&#34;: &#34;number&#34;: &#34;name&#34;: &#34;clone&#34;, &#34;status&#34;: &#34;success&#34;, &#34;error&#34;: &#34;&#34;, &#34;exit_code&#34;: 0, &#34;created&#34;: 1563475419, &#34;started&#34;: &#34;finished&#34;: &#34;host&#34;: &#34;company.localhost&#34;, &#34;runtime&#34;: &#34;docker&#34;, &#34;distribution&#34;: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/api/user/current/view/",
    "display": "User/Current/View",
    "title": "View",
    "content": "endpoint get /api/v1/user permissions coming soon! responses status code description 200 indicates the request has succeeded 401 user does not have proper sample section assumes you already know how to authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/user&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/api/user/view/",
    "display": "Api/User/View",
    "title": "View",
    "content": "endpoint get /api/v1/users/:user parameters the following are used to configure endpoint: name description user of permissions coming soon! responses status code 200 indicates request has succeeded 401 does not have proper sample section assumes you already know how authenticate api. api, please review authentication documentation. curl -x -h &#34;authorization: bearer &lt;token&gt;&#34; &#34;http://127.0.0.1:8080/api/v1/users/octokitty&#34; response &#34;id&#34;: 1, &#34;name&#34;: &#34;octokitty&#34;, &#34;token&#34;: null, &#34;favorites&#34;: [&#34;github/octocat&#34;], &#34;active&#34;: true, &#34;admin&#34;: false "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/build/view/",
    "display": "Cli/Build/View",
    "title": "View",
    "content": "command vela view build &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, build_org repo repository vela_repo, build_repo number vela_build, build_number output format vela_output, build_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build response id: repo_id: number: parent: event: push status: created error: &#34;&#34; populates when platform runs into an error with enqueued: 1563474077 created: 1563474076 started: finished: deploy: clone: https://github.com/github/octocat.git source: https://github.com/github/octocat/commit/48afb5bdc41ad69bf22588491333f7cf71135163 title: received from https://github.com/github/octocat message: first commit... commit: 48afb5bdc41ad69bf22588491333f7cf71135163 sender: octokitty author: branch: master ref: refs/heads/master baseref: host: &#34;company.localhost&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/config/view/",
    "display": "Cli/Config/View",
    "title": "View",
    "content": "command vela view config &lt;arguments...&gt; for more information, you can run --help. permissions coming soon! sample section assumes have already installed setup the cli. to install cli, please review installation documentation. authentication request response api: addr: https://vela-server.localhost token: supersecrettoken version: &#34;1&#34; log: level: info "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/deployment/view/",
    "display": "Cli/Deployment/View",
    "title": "View",
    "content": "command vela view deployment &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, deployment_org repo repository vela_repo, deployment_repo number vela_deployment, deployment_number output format vela_output, deployment_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --deployment response id: repo_id: url: https://api.github.com/repos/github/octocat/deployments/1 user: commit: 48afb5bdc41ad69bf22588491333f7cf71135163 ref: master task: deploy:vela target: production description: from "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/hook/view/",
    "display": "Cli/Hook/View",
    "title": "View",
    "content": "command vela view hook &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, hook_org repo repository vela_repo, hook_repo number vela_hook, hook_number output format vela_output, hook_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --hook response id: repo_id: build_id: number: source_id: c8da1302-07d6-11ea-882f-4893bca275b8 created: 1563475419 host: github.com event: push branch: master error: status: success link: https://github.com/github/octocat/settings/hooks/1 "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/log/view/",
    "display": "Cli/Log/View",
    "title": "View",
    "content": "command vela view log &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, log_org repo repository vela_repo, log_repo build number vela_build, log_build service vela_service, log_service step vela_step, log_step output format logs vela_output, log_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --step response git init initialized empty /vela/src/github.com/github/octocat/.git/ remote add origin https://github.com/github/octocat.git --verbose (fetch) (push) fetch --no-tags refs/heads/master from https://github.com/github/octocat branch master -&gt; fetch_head [new branch] origin/master reset --hard afafce5e33a8efd4340613b31a953107d6dec3a3 head now at afafce5 dummy commit "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/repo/view/",
    "display": "Cli/Repo/View",
    "title": "View",
    "content": "command vela view repo &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization repository vela_org, repo_org vela_repo, repo_name output format vela_output, repo_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat response id: userid: org: name: fullname: github/octocat link: https://github.com/github/octocat clone: https://github.com/github/octocat.git branch: master timeout: 60 visibility: public private: false trusted: active: true allowpull: allowpush: allowdeploy: allowtag: allowcomment: "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/secret/view/",
    "display": "Cli/Secret/View",
    "title": "View",
    "content": "command vela view secret &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, secret_org repo repository vela_repo, secret_repo secret.engine engine that stores vela_engine. secret_engine secret.type type being stored vela_type, secret_type team vela_team, secret_team vela_name, secret_name output format vela_output, secret_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --secret.engine native --secret.type --org github --repo octocat --name foo response id: org: repo: team: &#34;&#34; name: value: type: images: null events: push pull_request "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/service/view/",
    "display": "Cli/Service/View",
    "title": "View",
    "content": "command vela view service &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, service_org repo repository vela_repo, service_repo build number vela_build, service_build vela_service, service_number output format vela_output, service_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --service response id: build_id: repo_id: number: name: clone status: success error: &#34;&#34; exitcode: created: 1561748980 started: 1561748979 finished: 1561748981 host: &#34;worker.host.com&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/cli/step/view/",
    "display": "Cli/Step/View",
    "title": "View",
    "content": "command vela view step &lt;parameters...&gt; &lt;arguments...&gt; for more information, you can run --help. parameters the following are used to configure command: name description environment variables org of organization vela_org, step_org repo repository vela_repo, step_repo build number vela_build, step_build vela_step, step_number output format vela_output, step_output also supports setting via configuration file: please review cli config documentation. permissions coming soon! sample section assumes have already installed setup cli. install cli, installation authentication request --org github --repo octocat --build --step response id: build_id: repo_id: number: name: clone status: success error: &#34;&#34; populates when platform runs into an error with exitcode: created: 1561748980 started: 1561748979 finished: 1561748981 host: &#34;worker.host.com&#34; runtime: &#34;docker&#34; distribution: &#34;linux&#34; "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/build/view/",
    "display": "Go/Build/View",
    "title": "View",
    "content": "function func (svc *buildservice) get(org, repo string, build int) (*library.build, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/repo/view/",
    "display": "Go/Repo/View",
    "title": "View",
    "content": "function func (svc *reposervice) get(org, repo string) (*library.repo, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/secret/view/",
    "display": "Go/Secret/View",
    "title": "View",
    "content": "function func (svc *secretservice) get(engine, stype, org, name, secret string) (*library.secret, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description engine of stype type org organization repository team permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/service/view/",
    "display": "Go/Service/View",
    "title": "View",
    "content": "function func (svc *svcservice) get(org, repo string, build, service int) (*library.service, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    },

    {
    "url": "https://go-vela.github.io/docs/sdk/go/step/view/",
    "display": "Go/Step/View",
    "title": "View",
    "content": "function func (svc *stepservice) get(org, repo string, build, step int) (*library.step, *response, error) for more information, you can view our go documentation. parameters the following are used to configure endpoint: name description org of organization repository build number permissions coming soon! responses status code 200 indicates request has succeeded 401 user does not have proper sample section assumes already know how authenticate with sdk. sdk, please review authentication find an example here. "
    }

]}
